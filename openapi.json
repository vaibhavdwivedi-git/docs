{
  "openapi": "3.0.1",
  "info": {
    "title": "OpenAPI Rescan Explorer",
    "description": "Api reference for the Rescan Explorer",
    "license": {
      "name": "MIT"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://api.blockflow.network/rest"
    }
  ],
  "paths": {
    "/fbcc1fb0-7e72-4e5f-a711-879ee3e616ba/avs": {
      "get": {
        "operationId": "getAllAvs",
        "summary": "Retrieve all registered AVS",
        "description": "Returns all AVS records. Pagination Enabled.",
        "tags": [
          "AVS"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "The page number to retrieve",
            "required": false,
            "schema": {
              "type": "integer",
              "example": 1,
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The number of records per page",
            "required": false,
            "schema": {
              "type": "integer",
              "example": 12,
              "default": 12
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of AVS records.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "integer",
                          "description": "The status of the request",
                          "example": 200
                        },
                        "body": {
                          "type": "object",
                          "properties": {
                            "data": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "address": {
                                    "type": "string",
                                    "pattern": "^0x[a-fA-F0-9]{40}$",
                                    "description": "AVS service manager contract address",
                                    "example": "0x35f4f28a8d3ff20eed10e087e8f96ea2641e6aa1"
                                  },
                                  "metadataName": {
                                    "type": "string",
                                    "description": "The name of the AVS",
                                    "example": "Example AVS"
                                  },
                                  "metadataDescription": {
                                    "type": "string",
                                    "nullable": true,
                                    "description": "The description of the AVS",
                                    "example": "This is an example AVS"
                                  },
                                  "metadataDiscord": {
                                    "type": "string",
                                    "nullable": true,
                                    "format": "uri",
                                    "description": "The URL of the AVS's Discord server",
                                    "example": "https://discord.com/invite/abcdefghij"
                                  },
                                  "metadataLogo": {
                                    "type": "string",
                                    "nullable": true,
                                    "format": "uri",
                                    "description": "The URL of the AVS's logo",
                                    "example": "https://example.com/logo.png"
                                  },
                                  "metadataTelegram": {
                                    "type": "string",
                                    "nullable": true,
                                    "format": "uri",
                                    "description": "The URL of the AVS's Telegram channel",
                                    "example": "https://t.me/acme"
                                  },
                                  "metadataWebsite": {
                                    "type": "string",
                                    "nullable": true,
                                    "format": "uri",
                                    "description": "The URL of the AVS's website",
                                    "example": "https://acme.com"
                                  },
                                  "metadataX": {
                                    "type": "string",
                                    "nullable": true,
                                    "format": "uri",
                                    "description": "The URL of the AVS's X",
                                    "example": "https://twitter.com/acme"
                                  },
                                  "metadataURI": {
                                    "type": "string",
                                    "description": "The URI of the AVS metadata",
                                    "example": "https://example.com/metadata.json"
                                  },
                                  "isMetadataSynced": {
                                    "type": "boolean",
                                    "description": "Whether the metadata is synced",
                                    "example": true
                                  },
                                  "totalStakers": {
                                    "type": "integer",
                                    "description": "The total number of stakers staking in the AVS",
                                    "example": 10
                                  },
                                  "totalOperators": {
                                    "type": "integer",
                                    "description": "The total number of operators operating the AVS",
                                    "example": 10
                                  },
                                  "createdAtBlock": {
                                    "type": "integer",
                                    "description": "The block number at which the AVS was created",
                                    "example": 19631203
                                  },
                                  "updatedAtBlock": {
                                    "type": "integer",
                                    "description": "The block number at which the AVS was last updated",
                                    "example": 19631203
                                  },
                                  "createdAt": {
                                    "type": "string",
                                    "format": "date-time",
                                    "description": "The timestamp at which the AVS was created",
                                    "example": "2024-11-05T06:47:47.000Z"
                                  },
                                  "updatedAt": {
                                    "type": "string",
                                    "format": "date-time",
                                    "description": "The timestamp at which the AVS was last updated",
                                    "example": "2024-11-05T06:47:47.000Z"
                                  },
                                  "shares": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "strategyAddress": {
                                          "type": "string",
                                          "pattern": "^0x[a-fA-F0-9]{40}$",
                                          "description": "The contract address of the restaking strategy",
                                          "example": "0xbeac0eeeeeeeeeeeeeeeeeeeeeeeeeeeeeebeac0"
                                        },
                                        "shares": {
                                          "type": "string",
                                          "description": "The amount of shares held in the strategy",
                                          "example": "1277920000000000000000000"
                                        }
                                      },
                                      "required": [
                                        "strategyAddress",
                                        "shares"
                                      ]
                                    },
                                    "description": "The strategy shares held in the AVS"
                                  }
                                },
                                "required": [
                                  "address",
                                  "metadataName",
                                  "metadataDescription",
                                  "metadataLogo",
                                  "metadataDiscord",
                                  "metadataX",
                                  "metadataWebsite",
                                  "metadataTelegram",
                                  "metadataURI",
                                  "isMetadataSynced",
                                  "totalStakers",
                                  "totalOperators",
                                  "createdAtBlock",
                                  "updatedAtBlock",
                                  "createdAt",
                                  "updatedAt",
                                  "shares"
                                ]
                              }
                            },
                            "meta": {
                              "type": "object",
                              "properties": {
                                "total": {
                                  "type": "integer",
                                  "description": "Total number of records in the database",
                                  "example": 30
                                },
                                "page": {
                                  "type": "integer",
                                  "description": "The page number of the current query",
                                  "example": 1
                                },
                                "limit": {
                                  "type": "integer",
                                  "description": "The number of records returned for this query",
                                  "example": 12
                                }
                              },
                              "required": [
                                "total",
                                "page",
                                "limit"
                              ]
                            }
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/fbcc1fb0-7e72-4e5f-a711-879ee3e616ba/avs-all-address": {
      "get": {
        "operationId": "getAllAvsAddresses",
        "summary": "Retrieve all AVS addresses",
        "description": "Returns a list of all AVS addresses. Pagination Enabled.",
        "tags": [
          "AVS"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "The page number to retrieve",
            "required": false,
            "schema": {
              "type": "integer",
              "example": 1,
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The number of records per page",
            "required": false,
            "schema": {
              "type": "integer",
              "example": 12,
              "default": 12
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of AVS addresses.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "integer",
                          "description": "The HTTP status code",
                          "example": 200
                        },
                        "body": {
                          "type": "object",
                          "properties": {
                            "data": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "address": {
                                    "type": "string",
                                    "pattern": "^0x[a-fA-F0-9]{40}$",
                                    "description": "AVS service manager contract address",
                                    "example": "0x35f4f28a8d3ff20eed10e087e8f96ea2641e6aa1"
                                  },
                                  "name": {
                                    "type": "string",
                                    "description": "The name of the AVS",
                                    "example": "EigenDA"
                                  },
                                  "logo": {
                                    "type": "string",
                                    "description": "The logo of the AVS",
                                    "example": "https://example.com/logo.png"
                                  },
                                  "uri": {
                                    "type": "string",
                                    "description": "The metadata URI of the AVS",
                                    "example": "https://example.com/metadata.json"
                                  }
                                },
                                "required": [
                                  "address",
                                  "name",
                                  "logo",
                                  "uri"
                                ]
                              }
                            },
                            "meta": {
                              "type": "object",
                              "properties": {
                                "total": {
                                  "type": "integer",
                                  "description": "Total number of records in the database",
                                  "example": 27
                                },
                                "page": {
                                  "type": "integer",
                                  "description": "The page number of the current query",
                                  "example": 1
                                },
                                "limit": {
                                  "type": "integer",
                                  "description": "The number of records returned for this query",
                                  "example": 12
                                }
                              },
                              "required": [
                                "total",
                                "page",
                                "limit"
                              ]
                            }
                          },
                          "required": [
                            "data",
                            "meta"
                          ]
                        }
                      }
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/fbcc1fb0-7e72-4e5f-a711-879ee3e616ba/avs-by-address": {
      "get": {
        "operationId": "getAvsByAddress",
        "summary": "Retrieve an AVS details for a specific address",
        "description": "Returns a single AVS record by address.",
        "tags": [
          "AVS"
        ],
        "parameters": [
          {
            "name": "address",
            "in": "query",
            "description": "AVS service manager contract address",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "example": "0x35f4f28a8d3ff20eed10e087e8f96ea2641e6aa1"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The AVS record found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "number",
                          "description": "The HTTP status code",
                          "example": 200
                        },
                        "body": {
                          "type": "object",
                          "properties": {
                            "address": {
                              "type": "string",
                              "pattern": "^0x[a-fA-F0-9]{40}$",
                              "description": "AVS service manager contract address",
                              "example": "0x870679e138bcdf293b7ff14dd44b70fc97e12fc0"
                            },
                            "totalStakers": {
                              "type": "integer",
                              "description": "The total number of stakers staking in the AVS",
                              "example": 153023
                            },
                            "totalActiveOperators": {
                              "type": "integer",
                              "description": "The total number of active operators in the AVS",
                              "example": 219
                            },
                            "totalRegisteredOperators": {
                              "type": "string",
                              "description": "The total number of registered operators in the AVS",
                              "example": "552"
                            },
                            "createdAtBlock": {
                              "type": "string",
                              "description": "The block number at which the AVS was created",
                              "example": "19592323"
                            },
                            "updatedAtBlock": {
                              "type": "string",
                              "description": "The block number at which the AVS was last updated",
                              "example": "19592323"
                            },
                            "createdAt": {
                              "type": "string",
                              "description": "The timestamp at which the AVS was created",
                              "example": "2024-04-05T21:49:59.000Z"
                            },
                            "updatedAt": {
                              "type": "string",
                              "description": "The timestamp at which the AVS was last updated",
                              "example": "2024-04-05T21:49:59.000Z"
                            },
                            "curatedMetadata": {
                              "type": "object",
                              "properties": {
                                "avsAddress": {
                                  "type": "string",
                                  "description": "The AVS address",
                                  "example": "0x870679e138bcdf293b7ff14dd44b70fc97e12fc0"
                                },
                                "metadataName": {
                                  "type": "string",
                                  "description": "The name of the AVS",
                                  "example": "EigenDA"
                                },
                                "metadataDescription": {
                                  "type": "string",
                                  "nullable": true,
                                  "description": "The description of the AVS",
                                  "example": "EigenDA is a data availability solution with 10 MiB/s of write throughput and the lowest cost in its class."
                                },
                                "metadataDiscord": {
                                  "type": "string",
                                  "nullable": true,
                                  "description": "The URL of the AVS's Discord server",
                                  "example": ""
                                },
                                "metadataLogo": {
                                  "type": "string",
                                  "nullable": true,
                                  "description": "The URL of the AVS's logo",
                                  "example": "https://mainnet-ethereum-avs-metadata.s3.amazonaws.com/markEigenDA.png"
                                },
                                "metadataTelegram": {
                                  "type": "string",
                                  "nullable": true,
                                  "description": "The URL of the AVS's Telegram channel",
                                  "example": ""
                                },
                                "metadataWebsite": {
                                  "type": "string",
                                  "nullable": true,
                                  "description": "The URL of the AVS's website",
                                  "example": "https://docs.eigenlayer.xyz/eigenda/overview/"
                                },
                                "metadataX": {
                                  "type": "string",
                                  "nullable": true,
                                  "description": "The URL of the AVS's X (formerly Twitter) account",
                                  "example": "https://twitter.com/eigen_da"
                                },
                                "metadataGithub": {
                                  "type": "string",
                                  "nullable": true,
                                  "description": "The GitHub URL for the AVS",
                                  "example": null
                                },
                                "metadataTokenAddress": {
                                  "type": "string",
                                  "nullable": true,
                                  "description": "The token address associated with the AVS",
                                  "example": null
                                }
                              },
                              "required": [
                                "avsAddress",
                                "metadataName",
                                "metadataDescription",
                                "metadataLogo",
                                "metadataWebsite"
                              ]
                            },
                            "shares": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "strategyAddress": {
                                    "type": "string",
                                    "pattern": "^0x[a-fA-F0-9]{40}$",
                                    "description": "The contract address of the restaking strategy",
                                    "example": "0x01f3be8090c3f3a273c9cd598d8cfc94854a45dd"
                                  },
                                  "underlygingToken": {
                                    "type": "string",
                                    "pattern": "^0x[a-fA-F0-9]{40}$",
                                    "description": "The underlying token address of the strategy",
                                    "example": "0x853d955aCEf822Db058eb8505911ED77F175b99e"
                                  },
                                  "shares": {
                                    "type": "string",
                                    "description": "The amount of shares held in the strategy",
                                    "example": "104.211865480443592701"
                                  }
                                },
                                "required": [
                                  "strategyAddress",
                                  "underlygingToken",
                                  "shares"
                                ]
                              },
                              "description": "The strategy shares held in the AVS"
                            }
                          },
                          "required": [
                            "address",
                            "totalStakers",
                            "totalActiveOperators",
                            "totalRegisteredOperators",
                            "createdAtBlock",
                            "updatedAtBlock",
                            "createdAt",
                            "updatedAt",
                            "curatedMetadata",
                            "shares"
                          ]
                        }
                      }
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/fbcc1fb0-7e72-4e5f-a711-879ee3e616ba/avs-its-stakers": {
      "get": {
        "operationId": "getAvsStakersByAddress",
        "summary": "Retrieve all stakers for a specific AVS address",
        "description": "Returns all stakers for a specific AVS address. Pagination Enabled.",
        "tags": [
          "AVS"
        ],
        "parameters": [
          {
            "name": "address",
            "in": "query",
            "description": "AVS service manager contract address",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "example": "0x35f4f28a8d3ff20eed10e087e8f96ea2641e6aa1"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page number to retrieve",
            "schema": {
              "type": "number",
              "default": 1,
              "example": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The number of records per page",
            "schema": {
              "type": "number",
              "default": 12,
              "example": 12
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The stakers record found for the AVS.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "number",
                          "description": "The HTTP status code",
                          "example": 200
                        },
                        "body": {
                          "type": "object",
                          "properties": {
                            "data": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "address": {
                                    "type": "string",
                                    "pattern": "^0x[a-fA-F0-9]{40}$",
                                    "description": "The contract address of the staker",
                                    "example": "0x0000006c21964af0d420af8992851a30fa13a68b"
                                  },
                                  "operatorAddress": {
                                    "type": "string",
                                    "pattern": "^0x[a-fA-F0-9]{40}$",
                                    "description": "The address of the operator",
                                    "example": "0x71c6f7ed8c2d4925d0baf16f6a85bb1736d412eb"
                                  },
                                  "createdAtBlock": {
                                    "type": "string",
                                    "description": "The block number at which the Staker made first delegation",
                                    "example": "19631203"
                                  },
                                  "updatedAtBlock": {
                                    "type": "string",
                                    "description": "The block number at which the Staker made last delegation",
                                    "example": "20146916"
                                  },
                                  "createdAt": {
                                    "type": "string",
                                    "description": "The timestamp at which the Staker made first delegation",
                                    "example": "2024-05-13T11:49:35.000Z"
                                  },
                                  "updatedAt": {
                                    "type": "string",
                                    "description": "The timestamp at which the Staker made last delegation",
                                    "example": "2024-06-22T11:21:59.000Z"
                                  },
                                  "shares": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "strategy": {
                                          "type": "string",
                                          "pattern": "^0x[a-fA-F0-9]{40}$",
                                          "description": "The contract address of the restaking strategy",
                                          "example": "0xacb55c530acdb2849e6d4f36992cd8c9d50ed8f7"
                                        },
                                        "shares": {
                                          "type": "string",
                                          "description": "The amount of shares held in the strategy",
                                          "example": "230909115959999994061"
                                        }
                                      },
                                      "required": [
                                        "strategy",
                                        "shares"
                                      ]
                                    }
                                  }
                                },
                                "required": [
                                  "address",
                                  "operatorAddress",
                                  "createdAtBlock",
                                  "updatedAtBlock",
                                  "createdAt",
                                  "updatedAt",
                                  "shares"
                                ]
                              }
                            },
                            "meta": {
                              "type": "object",
                              "properties": {
                                "total": {
                                  "type": "number",
                                  "description": "Total number of records in the database",
                                  "example": 89954
                                },
                                "page": {
                                  "type": "number",
                                  "description": "The page number of the current query",
                                  "example": 1
                                },
                                "limit": {
                                  "type": "number",
                                  "description": "The number of records returned for this query",
                                  "example": 12
                                }
                              },
                              "required": [
                                "total",
                                "page",
                                "limit"
                              ]
                            }
                          },
                          "required": [
                            "data",
                            "meta"
                          ]
                        }
                      }
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/fbcc1fb0-7e72-4e5f-a711-879ee3e616ba/avs-its-operators": {
      "get": {
        "operationId": "getAvsOperatorsByAddress",
        "summary": "Retrieve all operators for a given AVS address",
        "description": "Returns all operators for a given AVS address. Pagination Enabled.",
        "tags": [
          "AVS"
        ],
        "parameters": [
          {
            "name": "address",
            "in": "query",
            "description": "AVS service manager contract address",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "example": "0x35f4f28a8d3ff20eed10e087e8f96ea2641e6aa1"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page number to retrieve",
            "schema": {
              "type": "number",
              "default": 1,
              "example": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The number of records per page",
            "schema": {
              "type": "number",
              "default": 12,
              "example": 12
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The operators record found for the AVS.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "number",
                          "description": "The HTTP status code",
                          "example": 200
                        },
                        "body": {
                          "type": "object",
                          "properties": {
                            "data": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "address": {
                                    "type": "string",
                                    "pattern": "^0x[a-fA-F0-9]{40}$",
                                    "description": "The contract address of the AVS operator",
                                    "example": "0x09e6eb09213bdd3698bd8afb43ec3cb0ecff683a"
                                  },
                                  "metadataName": {
                                    "type": "string",
                                    "description": "The name of the AVS",
                                    "example": "Google Cloud Web3"
                                  },
                                  "metadataDescription": {
                                    "type": "string",
                                    "nullable": true,
                                    "description": "The description of the AVS",
                                    "example": "Build and scale faster with simple, secure tools and infrastructure for Web3."
                                  },
                                  "metadataDiscord": {
                                    "type": "string",
                                    "nullable": true,
                                    "format": "uri",
                                    "description": "The URL of the AVS's Discord server",
                                    "example": "https://discord.com/invite/abcdefghij"
                                  },
                                  "metadataLogo": {
                                    "type": "string",
                                    "nullable": true,
                                    "format": "uri",
                                    "description": "The URL of the AVS's logo",
                                    "example": "https://example.com/logo.png"
                                  },
                                  "metadataTelegram": {
                                    "type": "string",
                                    "nullable": true,
                                    "format": "uri",
                                    "description": "The URL of the AVS's Telegram channel",
                                    "example": "https://t.me/acme"
                                  },
                                  "metadataWebsite": {
                                    "type": "string",
                                    "nullable": true,
                                    "format": "uri",
                                    "description": "The URL of the AVS's website",
                                    "example": "https://acme.com"
                                  },
                                  "metadataX": {
                                    "type": "string",
                                    "nullable": true,
                                    "format": "uri",
                                    "description": "The URL of the AVS's X",
                                    "example": "https://twitter.com/acme"
                                  },
                                  "metadataURI": {
                                    "type": "string",
                                    "description": "The URI of the AVS metadata",
                                    "example": "https://example.com/metadata.json"
                                  },
                                  "isMetadataSynced": {
                                    "type": "boolean",
                                    "description": "Whether the metadata is synced",
                                    "example": true
                                  },
                                  "createdAtBlock": {
                                    "type": "string",
                                    "description": "The block number at which the AVS Operator was registered",
                                    "example": "19631203"
                                  },
                                  "updatedAtBlock": {
                                    "type": "string",
                                    "description": "The block number at which the AVS Operator registration was last updated",
                                    "example": "21094737"
                                  },
                                  "createdAt": {
                                    "type": "string",
                                    "description": "The timestamp at which the AVS Operator was registered",
                                    "example": "2024-04-09T18:50:11.000Z"
                                  },
                                  "updatedAt": {
                                    "type": "string",
                                    "description": "The timestamp at which the AVS Operator registration was last updated",
                                    "example": "2024-11-01T18:57:47.000Z"
                                  },
                                  "shares": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "strategy": {
                                          "type": "string",
                                          "pattern": "^0x[a-fA-F0-9]{40}$",
                                          "description": "The contract address of the restaking strategy",
                                          "example": "0x93c4b944d05dfe6df7645a86cd2206016c51564d"
                                        },
                                        "shares": {
                                          "type": "string",
                                          "description": "The amount of shares held in the strategy",
                                          "example": "40074843548537495320"
                                        }
                                      },
                                      "required": [
                                        "strategy",
                                        "shares"
                                      ]
                                    }
                                  },
                                  "restakedStrategies": {
                                    "type": "array",
                                    "items": {
                                      "type": "string",
                                      "pattern": "^0x[a-fA-F0-9]{40}$"
                                    },
                                    "description": "The list of restaked strategies",
                                    "example": [
                                      "0x35f4f28a8d3ff20eed10e087e8f96ea2641e6aa1"
                                    ]
                                  },
                                  "totalStakers": {
                                    "type": "number",
                                    "description": "The total number of stakers who have delegated to this AVS operator",
                                    "example": 50
                                  }
                                },
                                "required": [
                                  "address",
                                  "metadataName",
                                  "metadataDescription",
                                  "metadataLogo",
                                  "metadataDiscord",
                                  "metadataX",
                                  "metadataWebsite",
                                  "metadataTelegram",
                                  "metadataURI",
                                  "isMetadataSynced",
                                  "createdAtBlock",
                                  "updatedAtBlock",
                                  "createdAt",
                                  "updatedAt",
                                  "shares",
                                  "restakedStrategies",
                                  "totalStakers"
                                ]
                              }
                            },
                            "meta": {
                              "type": "object",
                              "properties": {
                                "total": {
                                  "type": "number",
                                  "description": "Total number of records in the database",
                                  "example": 219
                                },
                                "page": {
                                  "type": "number",
                                  "description": "The page number of the current query",
                                  "example": 1
                                },
                                "limit": {
                                  "type": "number",
                                  "description": "The number of records returned for this query",
                                  "example": 12
                                }
                              },
                              "required": [
                                "total",
                                "page",
                                "limit"
                              ]
                            }
                          },
                          "required": [
                            "data",
                            "meta"
                          ]
                        }
                      }
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/fbcc1fb0-7e72-4e5f-a711-879ee3e616ba/metrics": {
      "get": {
        "operationId": "getAllMetrics",
        "summary": "Retrieve summary metrics",
        "description": "Returns summary metrics, including TVLs for both restaking strategies and the Beacon Chain ETH strategy, as well as the total number of AVS, operators, and stakers.",
        "tags": [
          "Metrics"
        ],
        "responses": {
          "200": {
            "description": "The list of summary metrics.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "number",
                          "description": "The HTTP status code",
                          "example": 200
                        },
                        "body": {
                          "type": "object",
                          "properties": {
                            "tvlBeaconChain": {
                              "type": "number",
                              "description": "The total value locked (TVL) in ETH in the beacon chain ETH strategy",
                              "example": 1000000
                            },
                            "tvlStrategies": {
                              "type": "object",
                              "additionalProperties": {
                                "type": "number",
                                "description": "The total value locked (TVL) in the strategy, denominated in the strategy's native token",
                                "example": 1000000
                              },
                              "description": "The total value locked (TVL) in each restaking strategy, denominated in the strategy's native token",
                              "example": {
                                "cbETH": 1000000,
                                "stETH": 2000000
                              }
                            },
                            "totalAVS": {
                              "type": "number",
                              "description": "The total number of AVS",
                              "example": 10
                            },
                            "totalOperators": {
                              "type": "number",
                              "description": "The total number of AVS operators",
                              "example": 10
                            },
                            "totalStakers": {
                              "type": "number",
                              "description": "The total number of AVS stakers",
                              "example": 10
                            }
                          },
                          "required": [
                            "tvlBeaconChain",
                            "tvlStrategies",
                            "totalAVS",
                            "totalOperators",
                            "totalStakers"
                          ]
                        }
                      }
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/fbcc1fb0-7e72-4e5f-a711-879ee3e616ba/metrics-tvl": {
      "get": {
        "operationId": "getTvlMetrics",
        "summary": "Retrieve total TVL",
        "description": "Returns the total value locked (TVL) in all restaking strategies and Beacon Chain restaking.",
        "tags": [
          "Metrics"
        ],
        "responses": {
          "200": {
            "description": "The value of the combined TVL in ETH.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "number",
                          "description": "The HTTP status code",
                          "example": 200
                        },
                        "body": {
                          "type": "object",
                          "properties": {
                            "tvlBeaconChain": {
                              "type": "number",
                              "description": "The total value locked (TVL) in ETH in the beacon chain ETH strategy",
                              "example": 1000000
                            },
                            "tvlStrategies": {
                              "type": "object",
                              "additionalProperties": {
                                "type": "number",
                                "description": "The total value locked (TVL) in the strategy, denominated in the strategy's native token",
                                "example": 1000000
                              },
                              "description": "The total value locked (TVL) in each restaking strategy, denominated in the strategy's native token",
                              "example": {
                                "cbETH": 1000000,
                                "stETH": 2000000
                              }
                            }
                          },
                          "required": [
                            "tvlBeaconChain",
                            "tvlStrategies"
                          ]
                        }
                      }
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/fbcc1fb0-7e72-4e5f-a711-879ee3e616ba/metrics-tvl-strategy": {
      "get": {
        "operationId": "getTvlRestakingMetricByStrategy",
        "summary": "Retrieve a strategy TVL by name",
        "description": "Returns the total value locked (TVL) in a specific LST strategy.",
        "tags": [
          "Metrics"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "strategyName": {
                    "type": "string",
                    "description": "The name of the restaking strategy",
                    "example": "cbETH"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The value of combined restaking strategy TVL and a breakdown of the TVL for each individual strategy.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "number",
                          "description": "The HTTP status code",
                          "example": 200
                        },
                        "body": {
                          "type": "object",
                          "properties": {
                            "tvl": {
                              "type": "number",
                              "description": "The value of the restaking strategy TVL, denominated in the strategy's native token",
                              "example": 1000000
                            }
                          },
                          "required": [
                            "tvl"
                          ]
                        }
                      }
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/fbcc1fb0-7e72-4e5f-a711-879ee3e616ba/total-avs": {
      "get": {
        "operationId": "getTotalAvsMetric",
        "summary": "Retrieve total number of AVS",
        "description": "Returns the total number of AVS registered.",
        "tags": [
          "Metrics"
        ],
        "responses": {
          "200": {
            "description": "The total number of AVS registered.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "number",
                          "description": "The HTTP status code",
                          "example": 200
                        },
                        "body": {
                          "type": "object",
                          "properties": {
                            "total": {
                              "type": "number",
                              "description": "The total number of AVS registered",
                              "example": 1000000
                            }
                          },
                          "required": [
                            "total"
                          ]
                        }
                      }
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/fbcc1fb0-7e72-4e5f-a711-879ee3e616ba/total-operators": {
      "get": {
        "operationId": "getTotalOperatorsMetric",
        "summary": "Retrieve total number of AVS operators",
        "description": "Returns the total number of AVS operators registered.",
        "tags": [
          "Metrics"
        ],
        "responses": {
          "200": {
            "description": "The total number of AVS operators registered.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "number",
                          "description": "The HTTP status code",
                          "example": 200
                        },
                        "body": {
                          "type": "object",
                          "properties": {
                            "total": {
                              "type": "number",
                              "description": "The total number of AVS operators registered",
                              "example": 1000000
                            }
                          },
                          "required": [
                            "total"
                          ]
                        }
                      }
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/fbcc1fb0-7e72-4e5f-a711-879ee3e616ba/total-stakers": {
      "get": {
        "operationId": "getTotalStakerssMetric",
        "summary": "Retrieve total number of AVS stakers",
        "description": "Returns the total number of AVS stakers registered.",
        "tags": [
          "Metrics"
        ],
        "responses": {
          "200": {
            "description": "The total number of AVS stakers registered.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "number",
                          "description": "The HTTP status code",
                          "example": 200
                        },
                        "body": {
                          "type": "object",
                          "properties": {
                            "total": {
                              "type": "number",
                              "description": "The total number of AVS stakers registered",
                              "example": 1000000
                            }
                          },
                          "required": [
                            "total"
                          ]
                        }
                      }
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/fbcc1fb0-7e72-4e5f-a711-879ee3e616ba/total-withdrawals": {
      "get": {
        "operationId": "getTotalWithdrawals",
        "summary": "Retrieve total number of withdrawals ",
        "description": "Returns the total number of withdrawals.",
        "tags": [
          "Metrics"
        ],
        "responses": {
          "200": {
            "description": "The total number of withdrawals.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "number",
                          "description": "The HTTP status code",
                          "example": 200
                        },
                        "body": {
                          "type": "object",
                          "properties": {
                            "total": {
                              "type": "number",
                              "description": "The total number of withdrawals",
                              "example": 1000000
                            },
                            "pending": {
                              "type": "number",
                              "description": "The  pending number of withdrawals",
                              "example": 1000000
                            },
                            "completed": {
                              "type": "number",
                              "description": "The completed number of withdrawals",
                              "example": 1000000
                            }
                          },
                          "required": [
                            "total",
                            "pending",
                            "completed"
                          ]
                        }
                      }
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/fbcc1fb0-7e72-4e5f-a711-879ee3e616ba/total-deposits": {
      "get": {
        "operationId": "getTotalDeposits",
        "summary": "Retrieve total number of deposits",
        "description": "Returns the total number of deposits.",
        "tags": [
          "Metrics"
        ],
        "responses": {
          "200": {
            "description": "The total number of deposits.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "number",
                          "description": "The HTTP status code",
                          "example": 200
                        },
                        "body": {
                          "type": "object",
                          "properties": {
                            "total": {
                              "type": "number",
                              "description": "The total number of deposits",
                              "example": 1000000
                            }
                          },
                          "required": [
                            "total"
                          ]
                        }
                      }
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/fbcc1fb0-7e72-4e5f-a711-879ee3e616ba/operators": {
      "get": {
        "operationId": "getAllOperators",
        "summary": "Retrieve all operators",
        "description": "Fetches all operator records with pagination support. Use query parameters to specify page number and limit.",
        "tags": [
          "Operators"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "default": 1,
              "description": "The page number to retrieve",
              "example": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "default": 12,
              "description": "The number of records per page",
              "example": 12
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of operator records.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "number",
                          "description": "The HTTP status code",
                          "example": 200
                        },
                        "body": {
                          "type": "object",
                          "properties": {
                            "data": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "address": {
                                    "type": "string",
                                    "pattern": "^0x[a-fA-F0-9]{40}$",
                                    "description": "The contract address of the AVS operator",
                                    "example": "0x09e6eb09213bdd3698bd8afb43ec3cb0ecff683a"
                                  },
                                  "metadataName": {
                                    "type": "string",
                                    "description": "The name of the AVS",
                                    "example": "Example AVS"
                                  },
                                  "metadataDescription": {
                                    "type": "string",
                                    "nullable": true,
                                    "description": "The description of the AVS",
                                    "example": "This is an example AVS"
                                  },
                                  "metadataDiscord": {
                                    "type": "string",
                                    "nullable": true,
                                    "format": "uri",
                                    "description": "The URL of the AVS's Discord server",
                                    "example": "https://discord.com/invite/abcdefghij"
                                  },
                                  "metadataLogo": {
                                    "type": "string",
                                    "nullable": true,
                                    "format": "uri",
                                    "description": "The URL of the AVS's logo",
                                    "example": "https://example.com/logo.png"
                                  },
                                  "metadataTelegram": {
                                    "type": "string",
                                    "nullable": true,
                                    "format": "uri",
                                    "description": "The URL of the AVS's Telegram channel",
                                    "example": "https://t.me/acme"
                                  },
                                  "metadataWebsite": {
                                    "type": "string",
                                    "nullable": true,
                                    "format": "uri",
                                    "description": "The URL of the AVS's website",
                                    "example": "https://acme.com"
                                  },
                                  "metadataX": {
                                    "type": "string",
                                    "nullable": true,
                                    "format": "uri",
                                    "description": "The URL of the AVS's X",
                                    "example": "https://twitter.com/acme"
                                  },
                                  "metadataURI": {
                                    "type": "string",
                                    "description": "The URI of the AVS metadata",
                                    "example": "https://example.com/metadata.json"
                                  },
                                  "isMetadataSynced": {
                                    "type": "boolean",
                                    "description": "Whether the metadata is synced",
                                    "example": true
                                  },
                                  "totalStakers": {
                                    "type": "number",
                                    "description": "The total number of stakers who have delegated to this AVS operator",
                                    "example": 10
                                  },
                                  "totalAvs": {
                                    "type": "number",
                                    "description": "The total number of AVS opted by the AVS operator",
                                    "example": 10
                                  },
                                  "createdAtBlock": {
                                    "type": "number",
                                    "description": "The block number at which the AVS Operator was registered",
                                    "example": 19631203
                                  },
                                  "updatedAtBlock": {
                                    "type": "number",
                                    "description": "The block number at which the AVS Operator registration was last updated",
                                    "example": 19631203
                                  },
                                  "createdAt": {
                                    "type": "string",
                                    "description": "The time stamp at which the AVS Operator was registered",
                                    "example": 1727836560
                                  },
                                  "updatedAt": {
                                    "type": "number",
                                    "description": "The time stamp at which the AVS Operator registration was last updated",
                                    "example": 1727836560
                                  },
                                  "shares": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "strategyAddress": {
                                          "type": "string",
                                          "pattern": "^0x[a-fA-F0-9]{40}$",
                                          "description": "The contract address of the restaking strategy",
                                          "example": "0xbeac0eeeeeeeeeeeeeeeeeeeeeeeeeeeeeebeac0"
                                        },
                                        "shares": {
                                          "type": "string",
                                          "description": "The amount of shares held in the strategy",
                                          "example": "1277920000000000000000000"
                                        }
                                      },
                                      "required": [
                                        "strategyAddress",
                                        "shares"
                                      ]
                                    },
                                    "description": "The strategy shares held in the AVS operator",
                                    "example": [
                                      {
                                        "strategyAddress": "0x93c4b944d05dfe6df7645a86cd2206016c51564d",
                                        "shares": "135064894598947935263152"
                                      },
                                      {
                                        "strategyAddress": "0x54945180db7943c0ed0fee7edab2bd24620256bc",
                                        "shares": "9323641881708650182301"
                                      }
                                    ]
                                  },
                                  "avsRegistrations": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "avsAddress": {
                                          "type": "string",
                                          "pattern": "^0x[a-fA-F0-9]{40}$",
                                          "description": "AVS service manager contract address",
                                          "example": "0x870679e138bcdf293b7ff14dd44b70fc97e12fc0"
                                        },
                                        "isActive": {
                                          "type": "boolean",
                                          "description": "True indicates operator is an active participant while False indicates it used to be one but not anymore",
                                          "example": false
                                        }
                                      },
                                      "required": [
                                        "avsAddress",
                                        "isActive"
                                      ]
                                    },
                                    "description": "Operator AVS registrations and their participation status",
                                    "example": [
                                      {
                                        "avsAddress": "0x870679e138bcdf293b7ff14dd44b70fc97e12fc0",
                                        "isActive": true
                                      },
                                      {
                                        "avsAddress": "0xe8e59c6c8b56f2c178f63bcfc4ce5e5e2359c8fc",
                                        "isActive": false
                                      }
                                    ]
                                  },
                                  "tvl": {
                                    "type": "object",
                                    "properties": {
                                      "tvlBeaconChain": {
                                        "type": "number",
                                        "description": "The TVL of Beacon Chain restaking strategy in ETH",
                                        "example": 1000000
                                      },
                                      "tvlWETH": {
                                        "type": "number",
                                        "description": "The TVL of WETH restaking strategy in ETH",
                                        "example": 1000000
                                      },
                                      "tvlStrategies": {
                                        "type": "object",
                                        "additionalProperties": {
                                          "type": "number",
                                          "description": "The total value locked (TVL) in the strategy, denominated in the strategy's native token",
                                          "example": 1000000
                                        },
                                        "description": "The TVL of each individual restaking strategy in its native token",
                                        "example": {
                                          "Eigen": 1000000,
                                          "cbETH": 2000000
                                        }
                                      }
                                    },
                                    "required": [
                                      "tvlBeaconChain",
                                      "tvlWETH",
                                      "tvlStrategies"
                                    ],
                                    "description": "The total value locked (TVL) in the AVS operator",
                                    "example": {
                                      "tvlBeaconChain": 1000000,
                                      "tvlWETH": 1000000,
                                      "tvlStrategies": {
                                        "Eigen": 1000000,
                                        "cbETH": 2000000
                                      }
                                    }
                                  }
                                },
                                "required": [
                                  "address",
                                  "metadataName",
                                  "metadataDescription",
                                  "metadataLogo",
                                  "metadataDiscord",
                                  "metadataX",
                                  "metadataWebsite",
                                  "metadataTelegram",
                                  "metadataURI",
                                  "isMetadataSynced",
                                  "totalStakers",
                                  "totalAvs",
                                  "createdAtBlock",
                                  "updatedAtBlock",
                                  "createdAt",
                                  "updatedAt",
                                  "shares",
                                  "avsRegistrations"
                                ]
                              }
                            },
                            "meta": {
                              "type": "object",
                              "properties": {
                                "total": {
                                  "type": "number",
                                  "description": "Total number of records in the database",
                                  "example": 30
                                },
                                "page": {
                                  "type": "number",
                                  "description": "The page number of the current response",
                                  "example": 1
                                },
                                "limit": {
                                  "type": "number",
                                  "description": "The number of records returned for this query",
                                  "example": 12
                                }
                              },
                              "required": [
                                "total",
                                "page",
                                "limit"
                              ]
                            }
                          },
                          "required": [
                            "data",
                            "meta"
                          ]
                        }
                      },
                      "required": [
                        "data"
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/fbcc1fb0-7e72-4e5f-a711-879ee3e616ba/operator-by-address": {
      "get": {
        "operationId": "getOperatorByAddress",
        "summary": "Retrieve operator details for a specific address",
        "description": "Returns an operator record by address.",
        "tags": [
          "Operators"
        ],
        "parameters": [
          {
            "name": "address",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "example": "0x35f4f28a8d3ff20eed10e087e8f96ea2641e6aa1"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "default": 1,
              "description": "The page number to retrieve",
              "example": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "default": 12,
              "description": "The number of records per page",
              "example": 12
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The record of the requested operator.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "number",
                          "description": "The HTTP status code",
                          "example": 200
                        },
                        "body": {
                          "type": "object",
                          "properties": {
                            "address": {
                              "type": "string",
                              "pattern": "^0x[a-fA-F0-9]{40}$",
                              "description": "The contract address of the AVS operator",
                              "example": "0x09e6eb09213bdd3698bd8afb43ec3cb0ecff683a"
                            },
                            "metadataName": {
                              "type": "string",
                              "description": "The name of the AVS",
                              "example": "Example AVS"
                            },
                            "metadataDescription": {
                              "type": "string",
                              "nullable": true,
                              "description": "The description of the AVS",
                              "example": "This is an example AVS"
                            },
                            "metadataDiscord": {
                              "type": "string",
                              "nullable": true,
                              "format": "uri",
                              "description": "The URL of the AVS's Discord server",
                              "example": "https://discord.com/invite/abcdefghij"
                            },
                            "metadataLogo": {
                              "type": "string",
                              "nullable": true,
                              "format": "uri",
                              "description": "The URL of the AVS's logo",
                              "example": "https://example.com/logo.png"
                            },
                            "metadataTelegram": {
                              "type": "string",
                              "nullable": true,
                              "format": "uri",
                              "description": "The URL of the AVS's Telegram channel",
                              "example": "https://t.me/acme"
                            },
                            "metadataWebsite": {
                              "type": "string",
                              "nullable": true,
                              "format": "uri",
                              "description": "The URL of the AVS's website",
                              "example": "https://acme.com"
                            },
                            "metadataX": {
                              "type": "string",
                              "nullable": true,
                              "format": "uri",
                              "description": "The URL of the AVS's X",
                              "example": "https://twitter.com/acme"
                            },
                            "metadataURI": {
                              "type": "string",
                              "description": "The URI of the AVS metadata",
                              "example": "https://example.com/metadata.json"
                            },
                            "isMetadataSynced": {
                              "type": "boolean",
                              "description": "Whether the metadata is synced",
                              "example": true
                            },
                            "totalStakers": {
                              "type": "number",
                              "description": "The total number of stakers who have delegated to this AVS operator",
                              "example": 10
                            },
                            "totalAvs": {
                              "type": "number",
                              "description": "The total number of AVS opted by the AVS operator",
                              "example": 10
                            },
                            "createdAtBlock": {
                              "type": "number",
                              "description": "The block number at which the AVS Operator was registered",
                              "example": 19631203
                            },
                            "updatedAtBlock": {
                              "type": "number",
                              "description": "The block number at which the AVS Operator registration was last updated",
                              "example": 19631203
                            },
                            "createdAt": {
                              "type": "number",
                              "description": "The time stamp at which the AVS Operator was registered",
                              "example": 1727836560
                            },
                            "updatedAt": {
                              "type": "number",
                              "description": "The time stamp at which the AVS Operator registration was last updated",
                              "example": 1727836560
                            },
                            "shares": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "strategyAddress": {
                                    "type": "string",
                                    "pattern": "^0x[a-fA-F0-9]{40}$",
                                    "description": "The contract address of the restaking strategy",
                                    "example": "0xbeac0eeeeeeeeeeeeeeeeeeeeeeeeeeeeeebeac0"
                                  },
                                  "shares": {
                                    "type": "string",
                                    "description": "The amount of shares held in the strategy",
                                    "example": "1277920000000000000000000"
                                  }
                                },
                                "required": [
                                  "strategyAddress",
                                  "shares"
                                ]
                              },
                              "description": "The strategy shares held in the AVS operator",
                              "example": [
                                {
                                  "strategyAddress": "0x93c4b944d05dfe6df7645a86cd2206016c51564d",
                                  "shares": "135064894598947935263152"
                                },
                                {
                                  "strategyAddress": "0x54945180db7943c0ed0fee7edab2bd24620256bc",
                                  "shares": "9323641881708650182301"
                                }
                              ]
                            },
                            "avsRegistrations": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "avsAddress": {
                                    "type": "string",
                                    "pattern": "^0x[a-fA-F0-9]{40}$",
                                    "description": "AVS service manager contract address",
                                    "example": "0x870679e138bcdf293b7ff14dd44b70fc97e12fc0"
                                  },
                                  "isActive": {
                                    "type": "boolean",
                                    "description": "True indicates operator is an active participant while False indicates it used to be one but not anymore",
                                    "example": false
                                  }
                                },
                                "required": [
                                  "avsAddress",
                                  "isActive"
                                ]
                              },
                              "description": "Operator AVS registrations and their participation status",
                              "example": [
                                {
                                  "avsAddress": "0x870679e138bcdf293b7ff14dd44b70fc97e12fc0",
                                  "isActive": true
                                },
                                {
                                  "avsAddress": "0xe8e59c6c8b56f2c178f63bcfc4ce5e5e2359c8fc",
                                  "isActive": false
                                }
                              ]
                            }
                          },
                          "required": [
                            "address",
                            "metadataName",
                            "metadataDescription",
                            "metadataLogo",
                            "metadataDiscord",
                            "metadataX",
                            "metadataWebsite",
                            "metadataTelegram",
                            "metadataURI",
                            "isMetadataSynced",
                            "totalStakers",
                            "totalAvs",
                            "createdAtBlock",
                            "updatedAtBlock",
                            "createdAt",
                            "updatedAt",
                            "shares",
                            "avsRegistrations"
                          ]
                        }
                      }
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/fbcc1fb0-7e72-4e5f-a711-879ee3e616ba/operators-all-address": {
      "get": {
        "operationId": "getOperatorAddresses",
        "summary": "Retrieve all operator addresses with basic metadata",
        "description": "Fetches a paginated list of operator addresses along with their names and logos.",
        "tags": [
          "Operators"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "default": 1,
              "description": "The page number to retrieve",
              "example": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "default": 12,
              "description": "The number of records per page",
              "example": 12
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved operator addresses",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "number",
                      "description": "HTTP status code",
                      "example": 200
                    },
                    "body": {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "address": {
                                "type": "string",
                                "pattern": "^0x[a-fA-F0-9]{40}$",
                                "description": "The contract address of the operator",
                                "example": "0x09e6eb09213bdd3698bd8afb43ec3cb0ecff683a"
                              },
                              "name": {
                                "type": "string",
                                "description": "The name of the operator",
                                "example": "Example Operator"
                              },
                              "logo": {
                                "type": "string",
                                "nullable": true,
                                "format": "uri",
                                "description": "The URL of the operator's logo",
                                "example": "https://example.com/logo.png"
                              }
                            },
                            "required": [
                              "address",
                              "name"
                            ]
                          }
                        },
                        "meta": {
                          "type": "object",
                          "properties": {
                            "total": {
                              "type": "number",
                              "description": "Total number of operators in the database",
                              "example": 30
                            },
                            "page": {
                              "type": "number",
                              "description": "Current page number",
                              "example": 1
                            },
                            "limit": {
                              "type": "number",
                              "description": "Number of records per page",
                              "example": 12
                            }
                          },
                          "required": [
                            "total",
                            "page",
                            "limit"
                          ]
                        }
                      },
                      "required": [
                        "data",
                        "meta"
                      ]
                    }
                  },
                  "required": [
                    "status",
                    "body"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "number",
                      "example": 400
                    },
                    "body": {
                      "type": "object",
                      "properties": {
                        "errors": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "List of validation errors",
                          "example": [
                            "Invalid page number",
                            "Invalid limit value"
                          ]
                        }
                      },
                      "required": [
                        "errors"
                      ]
                    }
                  },
                  "required": [
                    "status",
                    "body"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "number",
                      "example": 500
                    },
                    "body": {
                      "type": "object",
                      "properties": {
                        "errors": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "Error message",
                          "example": [
                            "Failed to fetch operator addresses"
                          ]
                        }
                      },
                      "required": [
                        "errors"
                      ]
                    }
                  },
                  "required": [
                    "status",
                    "body"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/fbcc1fb0-7e72-4e5f-a711-879ee3e616ba/operator-stakers": {
      "get": {
        "operationId": "getOperatorStakers",
        "summary": "Retrieve all stakers for a specific operator",
        "description": "Fetches a paginated list of stakers who have delegated to a specific operator, including their shares across different strategies.",
        "tags": [
          "Operators"
        ],
        "parameters": [
          {
            "name": "address",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "description": "The operator's address",
              "example": "0x09e6eb09213bdd3698bd8afb43ec3cb0ecff683a"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "default": 1,
              "description": "The page number to retrieve",
              "example": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "default": 12,
              "description": "The number of records per page",
              "example": 12
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved operator's stakers",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "number",
                      "description": "HTTP status code",
                      "example": 200
                    },
                    "body": {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "address": {
                                "type": "string",
                                "pattern": "^0x[a-fA-F0-9]{40}$",
                                "description": "The staker's address",
                                "example": "0x1234eb09213bdd3698bd8afb43ec3cb0ecff5678"
                              },
                              "createdAtBlock": {
                                "type": "number",
                                "description": "Block number when the staker was created",
                                "example": 19631203
                              },
                              "updatedAtBlock": {
                                "type": "number",
                                "description": "Block number when the staker was last updated",
                                "example": 19631205
                              },
                              "createdAt": {
                                "type": "string",
                                "format": "date-time",
                                "description": "Timestamp when the staker was created",
                                "example": "2024-02-01T12:00:00.000Z"
                              },
                              "updatedAt": {
                                "type": "string",
                                "format": "date-time",
                                "description": "Timestamp when the staker was last updated",
                                "example": "2024-02-01T13:30:00.000Z"
                              },
                              "shares": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "stakerAddress": {
                                      "type": "string",
                                      "pattern": "^0x[a-fA-F0-9]{40}$",
                                      "description": "The staker's address",
                                      "example": "0x1234eb09213bdd3698bd8afb43ec3cb0ecff5678"
                                    },
                                    "strategyAddress": {
                                      "type": "string",
                                      "pattern": "^0x[a-fA-F0-9]{40}$",
                                      "description": "The strategy contract address",
                                      "example": "0x93c4b944d05dfe6df7645a86cd2206016c51564d"
                                    },
                                    "shares": {
                                      "type": "string",
                                      "description": "Number of shares in the strategy",
                                      "example": "135064894598947935263152"
                                    }
                                  },
                                  "required": [
                                    "stakerAddress",
                                    "strategyAddress",
                                    "shares"
                                  ]
                                },
                                "description": "Array of staker shares across different strategies"
                              }
                            },
                            "required": [
                              "address",
                              "createdAtBlock",
                              "updatedAtBlock",
                              "createdAt",
                              "updatedAt",
                              "shares"
                            ]
                          }
                        },
                        "meta": {
                          "type": "object",
                          "properties": {
                            "total": {
                              "type": "number",
                              "description": "Total number of stakers for this operator",
                              "example": 30
                            },
                            "skip": {
                              "type": "number",
                              "description": "Number of records skipped",
                              "example": 0
                            },
                            "limit": {
                              "type": "number",
                              "description": "Number of records per page",
                              "example": 12
                            }
                          },
                          "required": [
                            "total",
                            "skip",
                            "limit"
                          ]
                        }
                      },
                      "required": [
                        "data",
                        "meta"
                      ]
                    }
                  },
                  "required": [
                    "status",
                    "body"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid parameters or missing operator address",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "number",
                      "example": 400
                    },
                    "body": {
                      "type": "object",
                      "properties": {
                        "errors": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "List of validation errors",
                          "example": [
                            "Operator address is required"
                          ]
                        }
                      },
                      "required": [
                        "errors"
                      ]
                    }
                  },
                  "required": [
                    "status",
                    "body"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "number",
                      "example": 500
                    },
                    "body": {
                      "type": "object",
                      "properties": {
                        "errors": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "Error message",
                          "example": [
                            "Failed to fetch operator stakers"
                          ]
                        }
                      },
                      "required": [
                        "errors"
                      ]
                    }
                  },
                  "required": [
                    "status",
                    "body"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/fbcc1fb0-7e72-4e5f-a711-879ee3e616ba/operator-staker-history": {
      "get": {
        "operationId": "getOperatorStakerHistory",
        "summary": "Retrieve staking history for a specific operator",
        "description": "Fetches a paginated list of historical staking actions (restaking events) associated with a specific operator.",
        "tags": [
          "Operators"
        ],
        "parameters": [
          {
            "name": "address",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "description": "The operator's address",
              "example": "0x09e6eb09213bdd3698bd8afb43ec3cb0ecff683a"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "default": 1,
              "description": "The page number to retrieve",
              "example": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "default": 12,
              "description": "The number of records per page",
              "example": 12
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved operator's staking history",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "number",
                      "description": "HTTP status code",
                      "example": 200
                    },
                    "body": {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "address": {
                                "type": "string",
                                "pattern": "^0x[a-fA-F0-9]{40}$",
                                "description": "The operator's address",
                                "example": "0x09e6eb09213bdd3698bd8afb43ec3cb0ecff683a"
                              },
                              "stakerAddress": {
                                "type": "string",
                                "pattern": "^0x[a-fA-F0-9]{40}$",
                                "description": "The staker's address",
                                "example": "0x1234eb09213bdd3698bd8afb43ec3cb0ecff5678"
                              },
                              "transactionHash": {
                                "type": "string",
                                "pattern": "^0x[a-fA-F0-9]{64}$",
                                "description": "Hash of the transaction",
                                "example": "0x123...abc"
                              },
                              "action": {
                                "type": "string",
                                "description": "Type of staking action performed",
                                "example": "delegate"
                              },
                              "shares": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "strategy": {
                                      "type": "string",
                                      "pattern": "^0x[a-fA-F0-9]{40}$",
                                      "description": "Strategy contract address",
                                      "example": "0x93c4b944d05dfe6df7645a86cd2206016c51564d"
                                    },
                                    "shares": {
                                      "type": "string",
                                      "description": "Number of shares",
                                      "example": "135064894598947935263152"
                                    }
                                  },
                                  "required": [
                                    "strategy",
                                    "shares"
                                  ]
                                },
                                "description": "Array of strategy shares involved in the action"
                              },
                              "createdAt": {
                                "type": "string",
                                "format": "date-time",
                                "description": "Timestamp when the action was created",
                                "example": "2024-02-01T12:00:00.000Z"
                              },
                              "updatedAt": {
                                "type": "string",
                                "format": "date-time",
                                "description": "Timestamp when the action was last updated",
                                "example": "2024-02-01T12:00:00.000Z"
                              },
                              "createdAtBlock": {
                                "type": "number",
                                "description": "Block number when the action was created",
                                "example": 19631203
                              },
                              "updatedAtBlock": {
                                "type": "number",
                                "description": "Block number when the action was last updated",
                                "example": 19631203
                              }
                            },
                            "required": [
                              "address",
                              "stakerAddress",
                              "transactionHash",
                              "action",
                              "shares",
                              "createdAt",
                              "createdAtBlock"
                            ]
                          }
                        },
                        "meta": {
                          "type": "object",
                          "properties": {
                            "total": {
                              "type": "number",
                              "description": "Total number of history records",
                              "example": 30
                            },
                            "page": {
                              "type": "number",
                              "description": "Current page number",
                              "example": 1
                            },
                            "limit": {
                              "type": "number",
                              "description": "Number of records per page",
                              "example": 12
                            }
                          },
                          "required": [
                            "total",
                            "page",
                            "limit"
                          ]
                        }
                      },
                      "required": [
                        "data",
                        "meta"
                      ]
                    }
                  },
                  "required": [
                    "status",
                    "body"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid parameters or missing operator address",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "number",
                      "example": 400
                    },
                    "body": {
                      "type": "object",
                      "properties": {
                        "errors": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "List of validation errors",
                          "example": [
                            "Operator address is required"
                          ]
                        }
                      },
                      "required": [
                        "errors"
                      ]
                    }
                  },
                  "required": [
                    "status",
                    "body"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "number",
                      "example": 500
                    },
                    "body": {
                      "type": "object",
                      "properties": {
                        "errors": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "Error message",
                          "example": [
                            "Failed to fetch operator staker history"
                          ]
                        }
                      },
                      "required": [
                        "errors"
                      ]
                    }
                  },
                  "required": [
                    "status",
                    "body"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/fbcc1fb0-7e72-4e5f-a711-879ee3e616ba/operator-avs-history": {
      "get": {
        "operationId": "getOperatorAvsHistory",
        "summary": "Retrieve AVS history for a specific operator",
        "description": "Fetches a paginated list of historical AVS-related events for a specific operator, ordered by block number in descending order.",
        "tags": [
          "Operators"
        ],
        "parameters": [
          {
            "name": "address",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "description": "The operator's address",
              "example": "0x09e6eb09213bdd3698bd8afb43ec3cb0ecff683a"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "default": 1,
              "description": "The page number to retrieve",
              "example": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "default": 12,
              "description": "The number of records per page",
              "example": 12
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved operator's AVS history",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "number",
                      "description": "HTTP status code",
                      "example": 200
                    },
                    "body": {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "address": {
                                "type": "string",
                                "pattern": "^0x[a-fA-F0-9]{40}$",
                                "description": "The operator's address",
                                "example": "0x09e6eb09213bdd3698bd8afb43ec3cb0ecff683a"
                              },
                              "avsAddress": {
                                "type": "string",
                                "pattern": "^0x[a-fA-F0-9]{40}$",
                                "description": "The AVS contract address",
                                "example": "0x870679e138bcdf293b7ff14dd44b70fc97e12fc0"
                              },
                              "event": {
                                "type": "string",
                                "description": "Type of AVS event",
                                "example": "registered"
                              },
                              "transactionHash": {
                                "type": "string",
                                "pattern": "^0x[a-fA-F0-9]{64}$",
                                "description": "Hash of the transaction",
                                "example": "0x123...abc"
                              },
                              "createdAt": {
                                "type": "string",
                                "format": "date-time",
                                "description": "Timestamp when the event occurred",
                                "example": "2024-02-01T12:00:00.000Z"
                              },
                              "createdAtBlock": {
                                "type": "number",
                                "description": "Block number when the event occurred",
                                "example": 19631203
                              }
                            },
                            "required": [
                              "address",
                              "avsAddress",
                              "event",
                              "transactionHash",
                              "createdAt",
                              "createdAtBlock"
                            ]
                          }
                        },
                        "meta": {
                          "type": "object",
                          "properties": {
                            "total": {
                              "type": "number",
                              "description": "Total number of history records",
                              "example": 30
                            },
                            "page": {
                              "type": "number",
                              "description": "Current page number",
                              "example": 1
                            },
                            "limit": {
                              "type": "number",
                              "description": "Number of records per page",
                              "example": 12
                            }
                          },
                          "required": [
                            "total",
                            "page",
                            "limit"
                          ]
                        }
                      },
                      "required": [
                        "data",
                        "meta"
                      ]
                    }
                  },
                  "required": [
                    "status",
                    "body"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid parameters or missing operator address",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "number",
                      "example": 400
                    },
                    "body": {
                      "type": "object",
                      "properties": {
                        "errors": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "List of validation errors",
                          "example": [
                            "Operator address is required"
                          ]
                        }
                      },
                      "required": [
                        "errors"
                      ]
                    }
                  },
                  "required": [
                    "status",
                    "body"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "number",
                      "example": 500
                    },
                    "body": {
                      "type": "object",
                      "properties": {
                        "errors": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "Error message",
                          "example": [
                            "Failed to fetch operator history"
                          ]
                        }
                      },
                      "required": [
                        "errors"
                      ]
                    }
                  },
                  "required": [
                    "status",
                    "body"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/fbcc1fb0-7e72-4e5f-a711-879ee3e616ba/pods": {
      "get": {
        "operationId": "getPods",
        "summary": "Retrieve all EigenPods",
        "description": "Returns a paginated list of EigenPods with their metrics and recent transactions.",
        "tags": [
          "Pods"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items per page",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 12,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of pods",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "address": {
                            "type": "string",
                            "description": "The address of the EigenPod",
                            "example": "0x1234..."
                          },
                          "owner": {
                            "type": "string",
                            "description": "The owner address of the EigenPod",
                            "example": "0xabcd..."
                          },
                          "createdAtBlock": {
                            "type": "integer",
                            "description": "Block number when the pod was created",
                            "example": 1234567
                          },
                          "updatedAtBlock": {
                            "type": "integer",
                            "description": "Block number when the pod was last updated",
                            "example": 1234568
                          },
                          "createdAt": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Timestamp when the pod was created",
                            "example": "2024-01-01T12:00:00.000Z"
                          },
                          "updatedAt": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Timestamp when the pod was last updated",
                            "example": "2024-01-01T12:30:00.000Z"
                          },
                          "metrics": {
                            "type": "object",
                            "properties": {
                              "totalTransactions": {
                                "type": "integer",
                                "description": "Total number of transactions for this pod",
                                "example": 10
                              },
                              "deposits": {
                                "type": "integer",
                                "description": "Number of deposit transactions",
                                "example": 6
                              },
                              "withdrawals": {
                                "type": "integer",
                                "description": "Number of withdrawal transactions",
                                "example": 4
                              },
                              "totalShares": {
                                "type": "string",
                                "description": "Total shares balance of the pod",
                                "example": "1000000000000000000"
                              }
                            }
                          },
                          "recentTransactions": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "transactionHash": {
                                  "type": "string",
                                  "description": "Hash of the transaction",
                                  "example": "0x1234..."
                                },
                                "sharesDelta": {
                                  "type": "string",
                                  "description": "Change in shares from this transaction",
                                  "example": "1000000000"
                                },
                                "transactionIndex": {
                                  "type": "integer",
                                  "description": "Index of the transaction in the block",
                                  "example": 1
                                },
                                "createdAt": {
                                  "type": "string",
                                  "format": "date-time",
                                  "description": "Timestamp when the transaction was created",
                                  "example": "2024-01-01T12:00:00.000Z"
                                },
                                "createdAtBlock": {
                                  "type": "integer",
                                  "description": "Block number when the transaction was created",
                                  "example": 1234567
                                }
                              }
                            },
                            "description": "List of recent transactions for this pod",
                            "maxItems": 5
                          }
                        }
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "total": {
                          "type": "integer",
                          "description": "Total number of pods",
                          "example": 100
                        },
                        "skip": {
                          "type": "integer",
                          "description": "Number of items skipped for pagination",
                          "example": 0
                        },
                        "take": {
                          "type": "integer",
                          "description": "Number of items per page",
                          "example": 12
                        }
                      },
                      "required": [
                        "total",
                        "skip",
                        "take"
                      ]
                    }
                  },
                  "required": [
                    "data",
                    "meta"
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/fbcc1fb0-7e72-4e5f-a711-879ee3e616ba/pods-all-address": {
      "get": {
        "operationId": "getPodsAllAddresses",
        "summary": "Retrieve EigenPods Addresses List",
        "description": "Returns a paginated list of EigenPods with basic information.",
        "tags": [
          "Pods"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items per page",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 12,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of pods",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "address": {
                            "type": "string",
                            "description": "The address of the EigenPod",
                            "example": "0x1234567890123456789012345678901234567890"
                          },
                          "owner": {
                            "type": "string",
                            "description": "The owner address of the EigenPod",
                            "example": "0xabcd567890123456789012345678901234567890"
                          }
                        },
                        "required": [
                          "address",
                          "owner"
                        ]
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "total": {
                          "type": "integer",
                          "description": "Total number of pods",
                          "example": 100
                        },
                        "skip": {
                          "type": "integer",
                          "description": "Number of items skipped for pagination",
                          "example": 0
                        },
                        "take": {
                          "type": "integer",
                          "description": "Number of items per page",
                          "example": 12
                        }
                      },
                      "required": [
                        "total",
                        "skip",
                        "take"
                      ]
                    }
                  },
                  "required": [
                    "data",
                    "meta"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid pagination parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "Invalid page number",
                        "Invalid limit"
                      ]
                    }
                  },
                  "required": [
                    "errors"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/fbcc1fb0-7e72-4e5f-a711-879ee3e616ba/pod-by-address": {
      "get": {
        "operationId": "getPodByAddress",
        "summary": "Retrieve an EigenPod by address",
        "description": "Returns detailed information about a specific EigenPod, including its metrics and recent transactions.",
        "tags": [
          "Pods"
        ],
        "parameters": [
          {
            "name": "address",
            "in": "query",
            "description": "The address of the EigenPod to retrieve",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "example": "0x1234567890123456789012345678901234567890"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the pod details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "address": {
                      "type": "string",
                      "description": "The address of the EigenPod",
                      "example": "0x1234567890123456789012345678901234567890"
                    },
                    "owner": {
                      "type": "string",
                      "description": "The owner address of the EigenPod",
                      "example": "0xabcd567890123456789012345678901234567890"
                    },
                    "createdAtBlock": {
                      "type": "integer",
                      "description": "Block number when the pod was created",
                      "example": 1234567
                    },
                    "updatedAtBlock": {
                      "type": "integer",
                      "description": "Block number when the pod was last updated",
                      "example": 1234568
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Timestamp when the pod was created",
                      "example": "2024-01-01T12:00:00.000Z"
                    },
                    "updatedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Timestamp when the pod was last updated",
                      "example": "2024-01-01T12:30:00.000Z"
                    },
                    "metrics": {
                      "type": "object",
                      "properties": {
                        "totalTransactions": {
                          "type": "integer",
                          "description": "Total number of transactions for this pod",
                          "example": 10
                        },
                        "deposits": {
                          "type": "integer",
                          "description": "Number of deposit transactions",
                          "example": 6
                        },
                        "withdrawals": {
                          "type": "integer",
                          "description": "Number of withdrawal transactions",
                          "example": 4
                        },
                        "totalShares": {
                          "type": "string",
                          "description": "Total shares balance of the pod",
                          "example": "1000000000000000000"
                        }
                      },
                      "required": [
                        "totalTransactions",
                        "deposits",
                        "withdrawals",
                        "totalShares"
                      ]
                    },
                    "recentTransactions": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "transactionHash": {
                            "type": "string",
                            "description": "Hash of the transaction",
                            "example": "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"
                          },
                          "sharesDelta": {
                            "type": "string",
                            "description": "Change in shares from this transaction",
                            "example": "1000000000"
                          },
                          "transactionIndex": {
                            "type": "integer",
                            "description": "Index of the transaction in the block",
                            "example": 1
                          },
                          "createdAt": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Timestamp when the transaction was created",
                            "example": "2024-01-01T12:00:00.000Z"
                          },
                          "createdAtBlock": {
                            "type": "integer",
                            "description": "Block number when the transaction was created",
                            "example": 1234567
                          }
                        },
                        "required": [
                          "transactionHash",
                          "sharesDelta",
                          "transactionIndex",
                          "createdAt",
                          "createdAtBlock"
                        ]
                      },
                      "description": "List of recent transactions for this pod",
                      "maxItems": 10
                    }
                  },
                  "required": [
                    "address",
                    "owner",
                    "createdAtBlock",
                    "updatedAtBlock",
                    "createdAt",
                    "updatedAt",
                    "metrics",
                    "recentTransactions"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Pod address is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "Pod address is required"
                      ]
                    }
                  },
                  "required": [
                    "errors"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "description": "Pod not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "Pod not found"
                      ]
                    }
                  },
                  "required": [
                    "errors"
                  ]
                }
              }
            }
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/fbcc1fb0-7e72-4e5f-a711-879ee3e616ba/pods-by-owner": {
      "get": {
        "operationId": "getPodsByOwner",
        "summary": "Retrieve EigenPods by owner address",
        "description": "Returns a paginated list of EigenPods owned by a specific address, including their metrics and recent transactions.",
        "tags": [
          "Pods"
        ],
        "parameters": [
          {
            "name": "address",
            "in": "query",
            "description": "The owner address to retrieve pods for",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "example": "0x1234567890123456789012345678901234567890"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items per page",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 12,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of pods for the owner",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "address": {
                            "type": "string",
                            "description": "The address of the EigenPod",
                            "example": "0x1234567890123456789012345678901234567890"
                          },
                          "owner": {
                            "type": "string",
                            "description": "The owner address of the EigenPod",
                            "example": "0xabcd567890123456789012345678901234567890"
                          },
                          "createdAtBlock": {
                            "type": "integer",
                            "description": "Block number when the pod was created",
                            "example": 1234567
                          },
                          "updatedAtBlock": {
                            "type": "integer",
                            "description": "Block number when the pod was last updated",
                            "example": 1234568
                          },
                          "createdAt": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Timestamp when the pod was created",
                            "example": "2024-01-01T12:00:00.000Z"
                          },
                          "updatedAt": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Timestamp when the pod was last updated",
                            "example": "2024-01-01T12:30:00.000Z"
                          },
                          "metrics": {
                            "type": "object",
                            "properties": {
                              "totalTransactions": {
                                "type": "integer",
                                "description": "Total number of transactions for this pod",
                                "example": 10
                              },
                              "deposits": {
                                "type": "integer",
                                "description": "Number of deposit transactions",
                                "example": 6
                              },
                              "withdrawals": {
                                "type": "integer",
                                "description": "Number of withdrawal transactions",
                                "example": 4
                              },
                              "totalShares": {
                                "type": "string",
                                "description": "Total shares balance of the pod",
                                "example": "1000000000000000000"
                              }
                            },
                            "required": [
                              "totalTransactions",
                              "deposits",
                              "withdrawals",
                              "totalShares"
                            ]
                          }
                        },
                        "required": [
                          "address",
                          "owner",
                          "createdAtBlock",
                          "updatedAtBlock",
                          "createdAt",
                          "updatedAt",
                          "metrics"
                        ]
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "total": {
                          "type": "integer",
                          "description": "Total number of pods owned by the address",
                          "example": 100
                        },
                        "skip": {
                          "type": "integer",
                          "description": "Number of items skipped for pagination",
                          "example": 0
                        },
                        "take": {
                          "type": "integer",
                          "description": "Number of items per page",
                          "example": 12
                        }
                      },
                      "required": [
                        "total",
                        "skip",
                        "take"
                      ]
                    }
                  },
                  "required": [
                    "data",
                    "meta"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Owner address is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "Owner address is required"
                      ]
                    }
                  },
                  "required": [
                    "errors"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/fbcc1fb0-7e72-4e5f-a711-879ee3e616ba/pods-transaction": {
      "get": {
        "operationId": "getPodsTransactions",
        "summary": "Retrieve all EigenPod Transactions",
        "description": "Returns a paginated list of EigenPod transactions with their details.",
        "tags": [
          "Transactions"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items per page",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 12,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of pod transactions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "transactionHash": {
                            "type": "string",
                            "description": "Hash of the transaction",
                            "example": "0x1234..."
                          },
                          "podAddress": {
                            "type": "string",
                            "description": "The address of the EigenPod",
                            "example": "0x1234..."
                          },
                          "podOwner": {
                            "type": "string",
                            "description": "The owner address of the EigenPod",
                            "example": "0xabcd..."
                          },
                          "sharesDelta": {
                            "type": "string",
                            "description": "Change in shares from this transaction",
                            "example": "1000000000"
                          },
                          "transactionIndex": {
                            "type": "integer",
                            "description": "Index of the transaction in the block",
                            "example": 1
                          },
                          "createdAt": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Timestamp when the transaction was created",
                            "example": "2024-01-01T12:00:00.000Z"
                          },
                          "createdAtBlock": {
                            "type": "integer",
                            "description": "Block number when the transaction was created",
                            "example": 1234567
                          }
                        },
                        "required": [
                          "transactionHash",
                          "podAddress",
                          "sharesDelta",
                          "transactionIndex",
                          "createdAt",
                          "createdAtBlock"
                        ]
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "total": {
                          "type": "integer",
                          "description": "Total number of transactions",
                          "example": 100
                        },
                        "skip": {
                          "type": "integer",
                          "description": "Number of items skipped for pagination",
                          "example": 0
                        },
                        "take": {
                          "type": "integer",
                          "description": "Number of items per page",
                          "example": 12
                        }
                      },
                      "required": [
                        "total",
                        "skip",
                        "take"
                      ]
                    }
                  },
                  "required": [
                    "data",
                    "meta"
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/fbcc1fb0-7e72-4e5f-a711-879ee3e616ba/pod-transaction": {
      "get": {
        "operationId": "getPodTransactions",
        "summary": "Retrieve transactions for a specific EigenPod",
        "description": "Returns a paginated list of transactions for a given EigenPod address.",
        "tags": [
          "Pods"
        ],
        "parameters": [
          {
            "name": "address",
            "in": "query",
            "description": "The address of the EigenPod",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items per page",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 12,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of pod transactions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "transactionHash": {
                            "type": "string",
                            "description": "Hash of the transaction",
                            "example": "0x1234..."
                          },
                          "podAddress": {
                            "type": "string",
                            "description": "Address of the EigenPod",
                            "example": "0xabcd..."
                          },
                          "podOwner": {
                            "type": "string",
                            "description": "Owner address of the EigenPod",
                            "example": "0xefgh..."
                          },
                          "sharesDelta": {
                            "type": "string",
                            "description": "Change in shares from this transaction",
                            "example": "1000000000"
                          },
                          "transactionIndex": {
                            "type": "integer",
                            "description": "Index of the transaction in the block",
                            "example": 1
                          },
                          "createdAt": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Timestamp when the transaction was created",
                            "example": "2024-01-01T12:00:00.000Z"
                          },
                          "createdAtBlock": {
                            "type": "integer",
                            "description": "Block number when the transaction was created",
                            "example": 1234567
                          }
                        },
                        "required": [
                          "transactionHash",
                          "podAddress",
                          "podOwner",
                          "sharesDelta",
                          "transactionIndex",
                          "createdAt",
                          "createdAtBlock"
                        ]
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "total": {
                          "type": "integer",
                          "description": "Total number of transactions",
                          "example": 100
                        },
                        "skip": {
                          "type": "integer",
                          "description": "Number of items skipped for pagination",
                          "example": 0
                        },
                        "take": {
                          "type": "integer",
                          "description": "Number of items per page",
                          "example": 12
                        }
                      },
                      "required": [
                        "total",
                        "skip",
                        "take"
                      ]
                    }
                  },
                  "required": [
                    "data",
                    "meta"
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/fbcc1fb0-7e72-4e5f-a711-879ee3e616ba/stakers": {
      "get": {
        "operationId": "getAllStakers",
        "summary": "Retrieve all stakers",
        "description": "Fetches a paginated list of all stakers with their operator assignments and share distributions across strategies.",
        "tags": [
          "Stakers"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "The page number to retrieve",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "description": "The number of records per page",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved list of stakers",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "number",
                      "description": "HTTP status code",
                      "example": 200
                    },
                    "body": {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "address": {
                                "type": "string",
                                "pattern": "^0x[a-fA-F0-9]{40}$",
                                "description": "The staker's address",
                                "example": "0x1234eb09213bdd3698bd8afb43ec3cb0ecff5678"
                              },
                              "operatorAddress": {
                                "type": "string",
                                "pattern": "^0x[a-fA-F0-9]{40}$",
                                "description": "The operator's address that this staker is delegating to",
                                "example": "0x09e6eb09213bdd3698bd8afb43ec3cb0ecff683a"
                              },
                              "createdAt": {
                                "type": "string",
                                "format": "date-time",
                                "description": "Timestamp when the staker was created",
                                "example": "2024-02-01T12:00:00.000Z"
                              },
                              "updatedAt": {
                                "type": "string",
                                "format": "date-time",
                                "description": "Timestamp when the staker was last updated",
                                "example": "2024-02-01T12:00:00.000Z"
                              },
                              "createdAtBlock": {
                                "type": "number",
                                "description": "Block number when the staker was created",
                                "example": 19631203
                              },
                              "updatedAtBlock": {
                                "type": "number",
                                "description": "Block number when the staker was last updated",
                                "example": 19631205
                              },
                              "shares": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "strategyAddress": {
                                      "type": "string",
                                      "pattern": "^0x[a-fA-F0-9]{40}$",
                                      "description": "The strategy contract address",
                                      "example": "0x93c4b944d05dfe6df7645a86cd2206016c51564d"
                                    },
                                    "shares": {
                                      "type": "string",
                                      "description": "Number of shares in the strategy",
                                      "example": "135064894598947935263152"
                                    }
                                  },
                                  "required": [
                                    "strategyAddress",
                                    "shares"
                                  ]
                                },
                                "description": "Array of strategy shares held by the staker"
                              }
                            },
                            "required": [
                              "address",
                              "operatorAddress",
                              "createdAt",
                              "updatedAt",
                              "createdAtBlock",
                              "updatedAtBlock",
                              "shares"
                            ]
                          }
                        },
                        "meta": {
                          "type": "object",
                          "properties": {
                            "total": {
                              "type": "number",
                              "description": "Total number of stakers",
                              "example": 30
                            },
                            "page": {
                              "type": "number",
                              "description": "Current page number",
                              "example": 1
                            },
                            "limit": {
                              "type": "number",
                              "description": "Number of records per page",
                              "example": 12
                            }
                          },
                          "required": [
                            "total",
                            "page",
                            "limit"
                          ]
                        }
                      },
                      "required": [
                        "data",
                        "meta"
                      ]
                    }
                  },
                  "required": [
                    "status",
                    "body"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "number",
                      "example": 400
                    },
                    "body": {
                      "type": "object",
                      "properties": {
                        "errors": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "List of validation errors",
                          "example": [
                            "Invalid page number",
                            "Invalid limit value"
                          ]
                        }
                      },
                      "required": [
                        "errors"
                      ]
                    }
                  },
                  "required": [
                    "status",
                    "body"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "number",
                      "example": 500
                    },
                    "body": {
                      "type": "object",
                      "properties": {
                        "errors": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "Error message",
                          "example": [
                            "Failed to fetch stakers list"
                          ]
                        }
                      },
                      "required": [
                        "errors"
                      ]
                    }
                  },
                  "required": [
                    "status",
                    "body"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/fbcc1fb0-7e72-4e5f-a711-879ee3e616ba/staker-by-address": {
      "get": {
        "operationId": "getStakerByAddress",
        "summary": "Retrieve staker details for a specific address",
        "description": "Fetches detailed information about a specific staker including their operator assignment and share distributions across strategies.",
        "tags": [
          "Stakers"
        ],
        "parameters": [
          {
            "name": "address",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "description": "The staker's address",
              "example": "0x1234eb09213bdd3698bd8afb43ec3cb0ecff5678"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved staker details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "number",
                      "description": "HTTP status code",
                      "example": 200
                    },
                    "body": {
                      "type": "object",
                      "properties": {
                        "address": {
                          "type": "string",
                          "pattern": "^0x[a-fA-F0-9]{40}$",
                          "description": "The staker's address",
                          "example": "0x1234eb09213bdd3698bd8afb43ec3cb0ecff5678"
                        },
                        "operatorAddress": {
                          "type": "string",
                          "pattern": "^0x[a-fA-F0-9]{40}$",
                          "description": "The operator's address that this staker is delegating to",
                          "example": "0x09e6eb09213bdd3698bd8afb43ec3cb0ecff683a"
                        },
                        "createdAt": {
                          "type": "string",
                          "format": "date-time",
                          "description": "Timestamp when the staker was created",
                          "example": "2024-02-01T12:00:00.000Z"
                        },
                        "updatedAt": {
                          "type": "string",
                          "format": "date-time",
                          "description": "Timestamp when the staker was last updated",
                          "example": "2024-02-01T12:00:00.000Z"
                        },
                        "createdAtBlock": {
                          "type": "number",
                          "description": "Block number when the staker was created",
                          "example": 19631203
                        },
                        "updatedAtBlock": {
                          "type": "number",
                          "description": "Block number when the staker was last updated",
                          "example": 19631205
                        },
                        "shares": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "strategyAddress": {
                                "type": "string",
                                "pattern": "^0x[a-fA-F0-9]{40}$",
                                "description": "The strategy contract address",
                                "example": "0x93c4b944d05dfe6df7645a86cd2206016c51564d"
                              },
                              "shares": {
                                "type": "string",
                                "description": "Number of shares in the strategy",
                                "example": "135064894598947935263152"
                              }
                            },
                            "required": [
                              "strategyAddress",
                              "shares"
                            ]
                          },
                          "description": "Array of strategy shares held by the staker"
                        }
                      },
                      "required": [
                        "address",
                        "operatorAddress",
                        "createdAt",
                        "updatedAt",
                        "createdAtBlock",
                        "updatedAtBlock",
                        "shares"
                      ]
                    }
                  },
                  "required": [
                    "status",
                    "body"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Missing address parameter",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "number",
                      "example": 400
                    },
                    "body": {
                      "type": "object",
                      "properties": {
                        "errors": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "List of validation errors",
                          "example": [
                            "Staker address is required"
                          ]
                        }
                      },
                      "required": [
                        "errors"
                      ]
                    }
                  },
                  "required": [
                    "status",
                    "body"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Staker address does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "number",
                      "example": 404
                    },
                    "body": {
                      "type": "object",
                      "properties": {
                        "errors": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "Error message",
                          "example": [
                            "Staker not found"
                          ]
                        }
                      },
                      "required": [
                        "errors"
                      ]
                    }
                  },
                  "required": [
                    "status",
                    "body"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "number",
                      "example": 500
                    },
                    "body": {
                      "type": "object",
                      "properties": {
                        "errors": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "Error message",
                          "example": [
                            "Failed to fetch staker details"
                          ]
                        }
                      },
                      "required": [
                        "errors"
                      ]
                    }
                  },
                  "required": [
                    "status",
                    "body"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/fbcc1fb0-7e72-4e5f-a711-879ee3e616ba/staker-withdrawals-all": {
      "get": {
        "operationId": "getStakerWithdrawals",
        "summary": "Retrieve all withdrawals for a specific staker",
        "description": "Fetches a paginated list of withdrawal records for a specific staker, including completed and pending withdrawals.",
        "tags": [
          "Stakers",
          "Withdrawals"
        ],
        "parameters": [
          {
            "name": "address",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "description": "The staker's address",
              "example": "0x1234eb09213bdd3698bd8afb43ec3cb0ecff5678"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "default": 1,
              "description": "The page number to retrieve",
              "example": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "default": 12,
              "description": "The number of records per page",
              "example": 12
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved staker's withdrawals",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "number",
                      "description": "HTTP status code",
                      "example": 200
                    },
                    "body": {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "withdrawalRoot": {
                                "type": "string",
                                "pattern": "^0x[a-fA-F0-9]{64}$",
                                "description": "The unique identifier for this withdrawal",
                                "example": "0x123...def"
                              },
                              "nonce": {
                                "type": "number",
                                "description": "Withdrawal nonce",
                                "example": 1
                              },
                              "stakerAddress": {
                                "type": "string",
                                "pattern": "^0x[a-fA-F0-9]{40}$",
                                "description": "The address of the staker",
                                "example": "0x1234eb09213bdd3698bd8afb43ec3cb0ecff5678"
                              },
                              "delegatedTo": {
                                "type": "string",
                                "pattern": "^0x[a-fA-F0-9]{40}$",
                                "description": "The operator address this withdrawal is delegated to",
                                "example": "0x09e6eb09213bdd3698bd8afb43ec3cb0ecff683a"
                              },
                              "withdrawerAddress": {
                                "type": "string",
                                "pattern": "^0x[a-fA-F0-9]{40}$",
                                "description": "The address that can complete this withdrawal",
                                "example": "0x5678eb09213bdd3698bd8afb43ec3cb0ecff1234"
                              },
                              "shares": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "strategy": {
                                      "type": "string",
                                      "pattern": "^0x[a-fA-F0-9]{40}$",
                                      "description": "Strategy contract address",
                                      "example": "0x93c4b944d05dfe6df7645a86cd2206016c51564d"
                                    },
                                    "shares": {
                                      "type": "string",
                                      "description": "Number of shares being withdrawn",
                                      "example": "135064894598947935263152"
                                    }
                                  },
                                  "required": [
                                    "strategy",
                                    "shares"
                                  ]
                                },
                                "description": "Array of strategy shares being withdrawn"
                              },
                              "isCompleted": {
                                "type": "boolean",
                                "description": "Whether the withdrawal has been completed",
                                "example": false
                              },
                              "createdAt": {
                                "type": "string",
                                "format": "date-time",
                                "description": "Timestamp when the withdrawal was created",
                                "example": "2024-02-01T12:00:00.000Z"
                              },
                              "updatedAt": {
                                "type": "string",
                                "format": "date-time",
                                "description": "Timestamp when the withdrawal was last updated",
                                "example": "2024-02-01T12:00:00.000Z"
                              },
                              "createdAtBlock": {
                                "type": "number",
                                "description": "Block number when the withdrawal was created",
                                "example": 19631203
                              },
                              "updatedAtBlock": {
                                "type": "number",
                                "description": "Block number when the withdrawal was last updated",
                                "example": 19631205
                              }
                            },
                            "required": [
                              "withdrawalRoot",
                              "nonce",
                              "stakerAddress",
                              "delegatedTo",
                              "withdrawerAddress",
                              "shares",
                              "isCompleted",
                              "createdAt",
                              "updatedAt",
                              "createdAtBlock",
                              "updatedAtBlock"
                            ]
                          }
                        },
                        "meta": {
                          "type": "object",
                          "properties": {
                            "total": {
                              "type": "number",
                              "description": "Total number of withdrawals",
                              "example": 30
                            },
                            "skip": {
                              "type": "number",
                              "description": "Number of records skipped",
                              "example": 0
                            },
                            "limit": {
                              "type": "number",
                              "description": "Number of records per page",
                              "example": 12
                            }
                          },
                          "required": [
                            "total",
                            "skip",
                            "limit"
                          ]
                        }
                      },
                      "required": [
                        "data",
                        "meta"
                      ]
                    }
                  },
                  "required": [
                    "status",
                    "body"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid parameters or missing staker address",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "number",
                      "example": 400
                    },
                    "body": {
                      "type": "object",
                      "properties": {
                        "errors": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "List of validation errors",
                          "example": [
                            "Staker address is required"
                          ]
                        }
                      },
                      "required": [
                        "errors"
                      ]
                    }
                  },
                  "required": [
                    "status",
                    "body"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "number",
                      "example": 500
                    },
                    "body": {
                      "type": "object",
                      "properties": {
                        "errors": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "Error message",
                          "example": [
                            "Failed to fetch staker withdrawals"
                          ]
                        }
                      },
                      "required": [
                        "errors"
                      ]
                    }
                  },
                  "required": [
                    "status",
                    "body"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/fbcc1fb0-7e72-4e5f-a711-879ee3e616ba/staker-withdrawal-completed": {
      "get": {
        "operationId": "getStakerCompletedWithdrawals",
        "summary": "Retrieve completed withdrawals for a specific staker",
        "description": "Fetches a paginated list of completed withdrawal records for a specific staker.",
        "tags": [
          "Stakers",
          "Withdrawals"
        ],
        "parameters": [
          {
            "name": "address",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "description": "The staker's address",
              "example": "0x1234eb09213bdd3698bd8afb43ec3cb0ecff5678"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "default": 1,
              "description": "The page number to retrieve",
              "example": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "default": 12,
              "description": "The number of records per page",
              "example": 12
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved staker's completed withdrawals",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "number",
                      "description": "HTTP status code",
                      "example": 200
                    },
                    "body": {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "withdrawalRoot": {
                                "type": "string",
                                "pattern": "^0x[a-fA-F0-9]{64}$",
                                "description": "The unique identifier for this withdrawal",
                                "example": "0x123...def"
                              },
                              "nonce": {
                                "type": "number",
                                "description": "Withdrawal nonce",
                                "example": 1
                              },
                              "stakerAddress": {
                                "type": "string",
                                "pattern": "^0x[a-fA-F0-9]{40}$",
                                "description": "The address of the staker",
                                "example": "0x1234eb09213bdd3698bd8afb43ec3cb0ecff5678"
                              },
                              "delegatedTo": {
                                "type": "string",
                                "pattern": "^0x[a-fA-F0-9]{40}$",
                                "description": "The operator address this withdrawal was delegated to",
                                "example": "0x09e6eb09213bdd3698bd8afb43ec3cb0ecff683a"
                              },
                              "withdrawerAddress": {
                                "type": "string",
                                "pattern": "^0x[a-fA-F0-9]{40}$",
                                "description": "The address that completed this withdrawal",
                                "example": "0x5678eb09213bdd3698bd8afb43ec3cb0ecff1234"
                              },
                              "shares": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "strategy": {
                                      "type": "string",
                                      "pattern": "^0x[a-fA-F0-9]{40}$",
                                      "description": "Strategy contract address",
                                      "example": "0x93c4b944d05dfe6df7645a86cd2206016c51564d"
                                    },
                                    "shares": {
                                      "type": "string",
                                      "description": "Number of shares withdrawn",
                                      "example": "135064894598947935263152"
                                    }
                                  },
                                  "required": [
                                    "strategy",
                                    "shares"
                                  ]
                                },
                                "description": "Array of strategy shares that were withdrawn"
                              },
                              "createdAt": {
                                "type": "string",
                                "format": "date-time",
                                "description": "Timestamp when the withdrawal was created",
                                "example": "2024-02-01T12:00:00.000Z"
                              },
                              "updatedAt": {
                                "type": "string",
                                "format": "date-time",
                                "description": "Timestamp when the withdrawal was completed",
                                "example": "2024-02-01T13:00:00.000Z"
                              },
                              "createdAtBlock": {
                                "type": "number",
                                "description": "Block number when the withdrawal was created",
                                "example": 19631203
                              },
                              "updatedAtBlock": {
                                "type": "number",
                                "description": "Block number when the withdrawal was completed",
                                "example": 19631205
                              }
                            },
                            "required": [
                              "withdrawalRoot",
                              "nonce",
                              "stakerAddress",
                              "delegatedTo",
                              "withdrawerAddress",
                              "shares",
                              "createdAt",
                              "updatedAt",
                              "createdAtBlock",
                              "updatedAtBlock"
                            ]
                          }
                        },
                        "meta": {
                          "type": "object",
                          "properties": {
                            "total": {
                              "type": "number",
                              "description": "Total number of completed withdrawals",
                              "example": 30
                            },
                            "skip": {
                              "type": "number",
                              "description": "Number of records skipped",
                              "example": 0
                            },
                            "limit": {
                              "type": "number",
                              "description": "Number of records per page",
                              "example": 12
                            }
                          },
                          "required": [
                            "total",
                            "skip",
                            "limit"
                          ]
                        }
                      },
                      "required": [
                        "data",
                        "meta"
                      ]
                    }
                  },
                  "required": [
                    "status",
                    "body"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid parameters or missing staker address",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "number",
                      "example": 400
                    },
                    "body": {
                      "type": "object",
                      "properties": {
                        "errors": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "List of validation errors",
                          "example": [
                            "Staker address is required"
                          ]
                        }
                      },
                      "required": [
                        "errors"
                      ]
                    }
                  },
                  "required": [
                    "status",
                    "body"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "number",
                      "example": 500
                    },
                    "body": {
                      "type": "object",
                      "properties": {
                        "errors": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "Error message",
                          "example": [
                            "Failed to fetch staker completed withdrawals"
                          ]
                        }
                      },
                      "required": [
                        "errors"
                      ]
                    }
                  },
                  "required": [
                    "status",
                    "body"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/fbcc1fb0-7e72-4e5f-a711-879ee3e616ba/staker-deposits": {
      "get": {
        "operationId": "getStakerDeposits",
        "summary": "Retrieve deposits for a specific staker",
        "description": "Fetches a paginated list of deposit records for a specific staker.",
        "tags": [
          "Stakers",
          "Deposits"
        ],
        "parameters": [
          {
            "name": "address",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "description": "The staker's address",
              "example": "0x1234eb09213bdd3698bd8afb43ec3cb0ecff5678"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "default": 1,
              "description": "The page number to retrieve",
              "example": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "default": 12,
              "description": "The number of records per page",
              "example": 12
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved staker's deposits",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "number",
                      "description": "HTTP status code",
                      "example": 200
                    },
                    "body": {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "transactionHash": {
                                "type": "string",
                                "pattern": "^0x[a-fA-F0-9]{64}$",
                                "description": "Hash of the deposit transaction",
                                "example": "0x123...def"
                              },
                              "stakerAddress": {
                                "type": "string",
                                "pattern": "^0x[a-fA-F0-9]{40}$",
                                "description": "The address of the staker",
                                "example": "0x1234eb09213bdd3698bd8afb43ec3cb0ecff5678"
                              },
                              "tokenAddress": {
                                "type": "string",
                                "pattern": "^0x[a-fA-F0-9]{40}$",
                                "description": "The address of the deposited token",
                                "example": "0x6b175474e89094c44da98b954eedeac495271d0f"
                              },
                              "strategyAddress": {
                                "type": "string",
                                "pattern": "^0x[a-fA-F0-9]{40}$",
                                "description": "The address of the strategy contract",
                                "example": "0x93c4b944d05dfe6df7645a86cd2206016c51564d"
                              },
                              "shares": {
                                "type": "string",
                                "description": "Number of shares received for the deposit",
                                "example": "135064894598947935263152"
                              },
                              "createdAt": {
                                "type": "string",
                                "format": "date-time",
                                "description": "Timestamp when the deposit was created",
                                "example": "2024-02-01T12:00:00.000Z"
                              },
                              "createdAtBlock": {
                                "type": "number",
                                "description": "Block number when the deposit was created",
                                "example": 19631203
                              }
                            },
                            "required": [
                              "transactionHash",
                              "stakerAddress",
                              "tokenAddress",
                              "strategyAddress",
                              "shares",
                              "createdAt",
                              "createdAtBlock"
                            ]
                          }
                        },
                        "meta": {
                          "type": "object",
                          "properties": {
                            "total": {
                              "type": "number",
                              "description": "Total number of deposits",
                              "example": 30
                            },
                            "skip": {
                              "type": "number",
                              "description": "Number of records skipped",
                              "example": 0
                            },
                            "limit": {
                              "type": "number",
                              "description": "Number of records per page",
                              "example": 12
                            }
                          },
                          "required": [
                            "total",
                            "skip",
                            "limit"
                          ]
                        }
                      },
                      "required": [
                        "data",
                        "meta"
                      ]
                    }
                  },
                  "required": [
                    "status",
                    "body"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid parameters or missing staker address",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "number",
                      "example": 400
                    },
                    "body": {
                      "type": "object",
                      "properties": {
                        "errors": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "List of validation errors",
                          "example": [
                            "Staker address is required"
                          ]
                        }
                      },
                      "required": [
                        "errors"
                      ]
                    }
                  },
                  "required": [
                    "status",
                    "body"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "number",
                      "example": 500
                    },
                    "body": {
                      "type": "object",
                      "properties": {
                        "errors": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "Error message",
                          "example": [
                            "Failed to fetch staker deposits"
                          ]
                        }
                      },
                      "required": [
                        "errors"
                      ]
                    }
                  },
                  "required": [
                    "status",
                    "body"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/fbcc1fb0-7e72-4e5f-a711-879ee3e616ba/staker-withdrawals-queued": {
      "get": {
        "operationId": "getStakerQueuedWithdrawals",
        "summary": "Retrieve queued withdrawals for a specific staker",
        "description": "Fetches a paginated list of pending (non-completed) withdrawal records for a specific staker.",
        "tags": [
          "Stakers",
          "Withdrawals"
        ],
        "parameters": [
          {
            "name": "address",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "description": "The staker's address",
              "example": "0x1234eb09213bdd3698bd8afb43ec3cb0ecff5678"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "default": 1,
              "description": "The page number to retrieve",
              "example": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "default": 12,
              "description": "The number of records per page",
              "example": 12
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved staker's queued withdrawals",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "number",
                      "description": "HTTP status code",
                      "example": 200
                    },
                    "body": {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "withdrawalRoot": {
                                "type": "string",
                                "pattern": "^0x[a-fA-F0-9]{64}$",
                                "description": "The unique identifier for this withdrawal",
                                "example": "0x123...def"
                              },
                              "nonce": {
                                "type": "number",
                                "description": "Withdrawal nonce",
                                "example": 1
                              },
                              "stakerAddress": {
                                "type": "string",
                                "pattern": "^0x[a-fA-F0-9]{40}$",
                                "description": "The address of the staker",
                                "example": "0x1234eb09213bdd3698bd8afb43ec3cb0ecff5678"
                              },
                              "delegatedTo": {
                                "type": "string",
                                "pattern": "^0x[a-fA-F0-9]{40}$",
                                "description": "The operator address this withdrawal is delegated to",
                                "example": "0x09e6eb09213bdd3698bd8afb43ec3cb0ecff683a"
                              },
                              "withdrawerAddress": {
                                "type": "string",
                                "pattern": "^0x[a-fA-F0-9]{40}$",
                                "description": "The address that can complete this withdrawal",
                                "example": "0x5678eb09213bdd3698bd8afb43ec3cb0ecff1234"
                              },
                              "shares": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "strategy": {
                                      "type": "string",
                                      "pattern": "^0x[a-fA-F0-9]{40}$",
                                      "description": "Strategy contract address",
                                      "example": "0x93c4b944d05dfe6df7645a86cd2206016c51564d"
                                    },
                                    "shares": {
                                      "type": "string",
                                      "description": "Number of shares being withdrawn",
                                      "example": "135064894598947935263152"
                                    }
                                  },
                                  "required": [
                                    "strategy",
                                    "shares"
                                  ]
                                },
                                "description": "Array of strategy shares being withdrawn"
                              },
                              "createdAt": {
                                "type": "string",
                                "format": "date-time",
                                "description": "Timestamp when the withdrawal was created",
                                "example": "2024-02-01T12:00:00.000Z"
                              },
                              "createdAtBlock": {
                                "type": "number",
                                "description": "Block number when the withdrawal was created",
                                "example": 19631203
                              }
                            },
                            "required": [
                              "withdrawalRoot",
                              "nonce",
                              "stakerAddress",
                              "delegatedTo",
                              "withdrawerAddress",
                              "shares",
                              "createdAt",
                              "createdAtBlock"
                            ]
                          }
                        },
                        "meta": {
                          "type": "object",
                          "properties": {
                            "total": {
                              "type": "number",
                              "description": "Total number of queued withdrawals",
                              "example": 30
                            },
                            "skip": {
                              "type": "number",
                              "description": "Number of records skipped",
                              "example": 0
                            },
                            "limit": {
                              "type": "number",
                              "description": "Number of records per page",
                              "example": 12
                            }
                          },
                          "required": [
                            "total",
                            "skip",
                            "limit"
                          ]
                        }
                      },
                      "required": [
                        "data",
                        "meta"
                      ]
                    }
                  },
                  "required": [
                    "status",
                    "body"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid parameters or missing staker address",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "number",
                      "example": 400
                    },
                    "body": {
                      "type": "object",
                      "properties": {
                        "errors": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "List of validation errors",
                          "example": [
                            "Staker address is required"
                          ]
                        }
                      },
                      "required": [
                        "errors"
                      ]
                    }
                  },
                  "required": [
                    "status",
                    "body"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "number",
                      "example": 500
                    },
                    "body": {
                      "type": "object",
                      "properties": {
                        "errors": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "Error message",
                          "example": [
                            "Failed to fetch staker queued withdrawals"
                          ]
                        }
                      },
                      "required": [
                        "errors"
                      ]
                    }
                  },
                  "required": [
                    "status",
                    "body"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/fbcc1fb0-7e72-4e5f-a711-879ee3e616ba/deposits": {
      "get": {
        "operationId": "getAllDeposits",
        "summary": "Retrieve all deposits",
        "description": "Fetches a paginated list of all deposit records across all stakers, ordered by creation time in descending order.",
        "tags": [
          "Deposits"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "default": 1,
              "description": "The page number to retrieve",
              "example": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "default": 12,
              "description": "The number of records per page",
              "example": 12
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved deposits",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "number",
                      "description": "HTTP status code",
                      "example": 200
                    },
                    "body": {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "transactionHash": {
                                "type": "string",
                                "pattern": "^0x[a-fA-F0-9]{64}$",
                                "description": "Hash of the deposit transaction",
                                "example": "0x123...def"
                              },
                              "stakerAddress": {
                                "type": "string",
                                "pattern": "^0x[a-fA-F0-9]{40}$",
                                "description": "The address of the staker who made the deposit",
                                "example": "0x1234eb09213bdd3698bd8afb43ec3cb0ecff5678"
                              },
                              "tokenAddress": {
                                "type": "string",
                                "pattern": "^0x[a-fA-F0-9]{40}$",
                                "description": "The address of the deposited token",
                                "example": "0x6b175474e89094c44da98b954eedeac495271d0f"
                              },
                              "strategyAddress": {
                                "type": "string",
                                "pattern": "^0x[a-fA-F0-9]{40}$",
                                "description": "The address of the strategy contract",
                                "example": "0x93c4b944d05dfe6df7645a86cd2206016c51564d"
                              },
                              "shares": {
                                "type": "string",
                                "description": "Number of shares received for the deposit",
                                "example": "135064894598947935263152"
                              },
                              "createdAt": {
                                "type": "string",
                                "format": "date-time",
                                "description": "Timestamp when the deposit was created",
                                "example": "2024-02-01T12:00:00.000Z"
                              },
                              "createdAtBlock": {
                                "type": "number",
                                "description": "Block number when the deposit was created",
                                "example": 19631203
                              }
                            },
                            "required": [
                              "transactionHash",
                              "stakerAddress",
                              "tokenAddress",
                              "strategyAddress",
                              "shares",
                              "createdAt",
                              "createdAtBlock"
                            ]
                          }
                        },
                        "meta": {
                          "type": "object",
                          "properties": {
                            "total": {
                              "type": "number",
                              "description": "Total number of deposits",
                              "example": 30
                            },
                            "skip": {
                              "type": "number",
                              "description": "Number of records skipped",
                              "example": 0
                            },
                            "limit": {
                              "type": "number",
                              "description": "Number of records per page",
                              "example": 12
                            }
                          },
                          "required": [
                            "total",
                            "skip",
                            "limit"
                          ]
                        }
                      },
                      "required": [
                        "data",
                        "meta"
                      ]
                    }
                  },
                  "required": [
                    "status",
                    "body"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "number",
                      "example": 400
                    },
                    "body": {
                      "type": "object",
                      "properties": {
                        "errors": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "List of validation errors",
                          "example": [
                            "Invalid page number",
                            "Invalid limit value"
                          ]
                        }
                      },
                      "required": [
                        "errors"
                      ]
                    }
                  },
                  "required": [
                    "status",
                    "body"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "number",
                      "example": 500
                    },
                    "body": {
                      "type": "object",
                      "properties": {
                        "errors": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "Error message",
                          "example": [
                            "Failed to fetch deposits"
                          ]
                        }
                      },
                      "required": [
                        "errors"
                      ]
                    }
                  },
                  "required": [
                    "status",
                    "body"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/fbcc1fb0-7e72-4e5f-a711-879ee3e616ba/withdrawals": {
      "get": {
        "operationId": "getAllWithdrawals",
        "summary": "Retrieve all withdrawals",
        "description": "Fetches a paginated list of all withdrawal records across all stakers, including both completed and pending withdrawals, ordered by creation time in descending order.",
        "tags": [
          "Withdrawals"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "default": 1,
              "description": "The page number to retrieve",
              "example": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "default": 12,
              "description": "The number of records per page",
              "example": 12
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved withdrawals",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "number",
                      "description": "HTTP status code",
                      "example": 200
                    },
                    "body": {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "withdrawalRoot": {
                                "type": "string",
                                "pattern": "^0x[a-fA-F0-9]{64}$",
                                "description": "The unique identifier for this withdrawal",
                                "example": "0x123...def"
                              },
                              "nonce": {
                                "type": "number",
                                "description": "Withdrawal nonce",
                                "example": 1
                              },
                              "stakerAddress": {
                                "type": "string",
                                "pattern": "^0x[a-fA-F0-9]{40}$",
                                "description": "The address of the staker",
                                "example": "0x1234eb09213bdd3698bd8afb43ec3cb0ecff5678"
                              },
                              "delegatedTo": {
                                "type": "string",
                                "pattern": "^0x[a-fA-F0-9]{40}$",
                                "description": "The operator address this withdrawal is delegated to",
                                "example": "0x09e6eb09213bdd3698bd8afb43ec3cb0ecff683a"
                              },
                              "withdrawerAddress": {
                                "type": "string",
                                "pattern": "^0x[a-fA-F0-9]{40}$",
                                "description": "The address that can complete this withdrawal",
                                "example": "0x5678eb09213bdd3698bd8afb43ec3cb0ecff1234"
                              },
                              "shares": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "strategy": {
                                      "type": "string",
                                      "pattern": "^0x[a-fA-F0-9]{40}$",
                                      "description": "Strategy contract address",
                                      "example": "0x93c4b944d05dfe6df7645a86cd2206016c51564d"
                                    },
                                    "shares": {
                                      "type": "string",
                                      "description": "Number of shares being withdrawn",
                                      "example": "135064894598947935263152"
                                    }
                                  },
                                  "required": [
                                    "strategy",
                                    "shares"
                                  ]
                                },
                                "description": "Array of strategy shares being withdrawn"
                              },
                              "isCompleted": {
                                "type": "boolean",
                                "description": "Whether the withdrawal has been completed",
                                "example": false
                              },
                              "createdAt": {
                                "type": "string",
                                "format": "date-time",
                                "description": "Timestamp when the withdrawal was created",
                                "example": "2024-02-01T12:00:00.000Z"
                              },
                              "updatedAt": {
                                "type": "string",
                                "format": "date-time",
                                "description": "Timestamp when the withdrawal was last updated",
                                "example": "2024-02-01T13:00:00.000Z"
                              },
                              "createdAtBlock": {
                                "type": "number",
                                "description": "Block number when the withdrawal was created",
                                "example": 19631203
                              },
                              "updatedAtBlock": {
                                "type": "number",
                                "description": "Block number when the withdrawal was last updated",
                                "example": 19631205
                              }
                            },
                            "required": [
                              "withdrawalRoot",
                              "nonce",
                              "stakerAddress",
                              "delegatedTo",
                              "withdrawerAddress",
                              "shares",
                              "isCompleted",
                              "createdAt",
                              "createdAtBlock"
                            ]
                          }
                        },
                        "meta": {
                          "type": "object",
                          "properties": {
                            "total": {
                              "type": "number",
                              "description": "Total number of withdrawals",
                              "example": 30
                            },
                            "skip": {
                              "type": "number",
                              "description": "Number of records skipped",
                              "example": 0
                            },
                            "limit": {
                              "type": "number",
                              "description": "Number of records per page",
                              "example": 12
                            }
                          },
                          "required": [
                            "total",
                            "skip",
                            "limit"
                          ]
                        }
                      },
                      "required": [
                        "data",
                        "meta"
                      ]
                    }
                  },
                  "required": [
                    "status",
                    "body"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "number",
                      "example": 400
                    },
                    "body": {
                      "type": "object",
                      "properties": {
                        "errors": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "List of validation errors",
                          "example": [
                            "Invalid page number",
                            "Invalid limit value"
                          ]
                        }
                      },
                      "required": [
                        "errors"
                      ]
                    }
                  },
                  "required": [
                    "status",
                    "body"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "number",
                      "example": 500
                    },
                    "body": {
                      "type": "object",
                      "properties": {
                        "errors": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "Error message",
                          "example": [
                            "Failed to fetch withdrawals"
                          ]
                        }
                      },
                      "required": [
                        "errors"
                      ]
                    }
                  },
                  "required": [
                    "status",
                    "body"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/fbcc1fb0-7e72-4e5f-a711-879ee3e616ba/withdrawals-by-withdrawal-root": {
      "get": {
        "operationId": "getWithdrawalByRoot",
        "summary": "Retrieve withdrawal details by withdrawal root",
        "description": "Fetches detailed information about a specific withdrawal using its withdrawal root identifier.",
        "tags": [
          "Withdrawals"
        ],
        "parameters": [
          {
            "name": "root",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^0x[a-fA-F0-9]{64}$",
              "description": "The withdrawal root identifier",
              "example": "0x123...def"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved withdrawal details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "number",
                      "description": "HTTP status code",
                      "example": 200
                    },
                    "body": {
                      "type": "object",
                      "properties": {
                        "withdrawalRoot": {
                          "type": "string",
                          "pattern": "^0x[a-fA-F0-9]{64}$",
                          "description": "The unique identifier for this withdrawal",
                          "example": "0x123...def"
                        },
                        "nonce": {
                          "type": "number",
                          "description": "Withdrawal nonce",
                          "example": 1
                        },
                        "stakerAddress": {
                          "type": "string",
                          "pattern": "^0x[a-fA-F0-9]{40}$",
                          "description": "The address of the staker",
                          "example": "0x1234eb09213bdd3698bd8afb43ec3cb0ecff5678"
                        },
                        "delegatedTo": {
                          "type": "string",
                          "pattern": "^0x[a-fA-F0-9]{40}$",
                          "description": "The operator address this withdrawal is delegated to",
                          "example": "0x09e6eb09213bdd3698bd8afb43ec3cb0ecff683a"
                        },
                        "withdrawerAddress": {
                          "type": "string",
                          "pattern": "^0x[a-fA-F0-9]{40}$",
                          "description": "The address that can complete this withdrawal",
                          "example": "0x5678eb09213bdd3698bd8afb43ec3cb0ecff1234"
                        },
                        "shares": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "strategy": {
                                "type": "string",
                                "pattern": "^0x[a-fA-F0-9]{40}$",
                                "description": "Strategy contract address",
                                "example": "0x93c4b944d05dfe6df7645a86cd2206016c51564d"
                              },
                              "shares": {
                                "type": "string",
                                "description": "Number of shares being withdrawn",
                                "example": "135064894598947935263152"
                              }
                            },
                            "required": [
                              "strategy",
                              "shares"
                            ]
                          },
                          "description": "Array of strategy shares being withdrawn"
                        },
                        "isCompleted": {
                          "type": "boolean",
                          "description": "Whether the withdrawal has been completed",
                          "example": false
                        },
                        "createdAt": {
                          "type": "string",
                          "format": "date-time",
                          "description": "Timestamp when the withdrawal was created",
                          "example": "2024-02-01T12:00:00.000Z"
                        },
                        "updatedAt": {
                          "type": "string",
                          "format": "date-time",
                          "description": "Timestamp when the withdrawal was last updated",
                          "example": "2024-02-01T13:00:00.000Z"
                        },
                        "createdAtBlock": {
                          "type": "number",
                          "description": "Block number when the withdrawal was created",
                          "example": 19631203
                        },
                        "updatedAtBlock": {
                          "type": "number",
                          "description": "Block number when the withdrawal was last updated",
                          "example": 19631205
                        }
                      },
                      "required": [
                        "withdrawalRoot",
                        "nonce",
                        "stakerAddress",
                        "delegatedTo",
                        "withdrawerAddress",
                        "shares",
                        "isCompleted",
                        "createdAt",
                        "createdAtBlock",
                        "updatedAt",
                        "updatedAtBlock"
                      ]
                    }
                  },
                  "required": [
                    "status",
                    "body"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Missing withdrawal root",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "number",
                      "example": 400
                    },
                    "body": {
                      "type": "object",
                      "properties": {
                        "errors": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "List of validation errors",
                          "example": [
                            "Withdrawal root is required"
                          ]
                        }
                      },
                      "required": [
                        "errors"
                      ]
                    }
                  },
                  "required": [
                    "status",
                    "body"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Withdrawal root does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "number",
                      "example": 404
                    },
                    "body": {
                      "type": "object",
                      "properties": {
                        "errors": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "Error message",
                          "example": [
                            "Withdrawal not found"
                          ]
                        }
                      },
                      "required": [
                        "errors"
                      ]
                    }
                  },
                  "required": [
                    "status",
                    "body"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "number",
                      "example": 500
                    },
                    "body": {
                      "type": "object",
                      "properties": {
                        "errors": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "Error message",
                          "example": [
                            "Failed to fetch withdrawal"
                          ]
                        }
                      },
                      "required": [
                        "errors"
                      ]
                    }
                  },
                  "required": [
                    "status",
                    "body"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/fbcc1fb0-7e72-4e5f-a711-879ee3e616ba/all-distribution-roots": {
      "get": {
        "operationId": "getAllDistributionRoots",
        "summary": "Retrieve all distribution roots",
        "description": "Fetches all distribution root records with pagination support. Returns the most recent root for each rootIndex.",
        "tags": [
          "Distribution Roots"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "default": 1,
              "description": "The page number to retrieve",
              "example": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "default": 12,
              "description": "The number of records per page",
              "example": 12
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of distribution root records.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "rootIndex": {
                            "type": "number",
                            "description": "The index of the distribution root",
                            "example": 1
                          },
                          "root": {
                            "type": "string",
                            "description": "The Merkle root hash",
                            "example": "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"
                          },
                          "rewardsCalculationEndTimestamp": {
                            "type": "number",
                            "description": "The timestamp when rewards calculation ended",
                            "example": 1727836560
                          },
                          "activatedAt": {
                            "type": "number",
                            "description": "The timestamp when the root was activated",
                            "example": 1727836560
                          },
                          "status": {
                            "type": "string",
                            "description": "The current status of the distribution root",
                            "example": "active"
                          },
                          "createdAt": {
                            "type": "number",
                            "description": "The timestamp when the record was created",
                            "example": 1727836560
                          },
                          "updatedAt": {
                            "type": "number",
                            "description": "The timestamp when the record was last updated",
                            "example": 1727836560
                          }
                        },
                        "required": [
                          "rootIndex",
                          "root",
                          "rewardsCalculationEndTimestamp",
                          "activatedAt",
                          "status",
                          "createdAt",
                          "updatedAt"
                        ]
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "total": {
                          "type": "number",
                          "description": "Total number of records in the database",
                          "example": 30
                        },
                        "page": {
                          "type": "number",
                          "description": "The page number of the current response",
                          "example": 1
                        },
                        "limit": {
                          "type": "number",
                          "description": "The number of records returned for this query",
                          "example": 12
                        }
                      },
                      "required": [
                        "total",
                        "page",
                        "limit"
                      ]
                    }
                  },
                  "required": [
                    "data",
                    "meta"
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/fbcc1fb0-7e72-4e5f-a711-879ee3e616ba/distribution-roots-by-status": {
      "get": {
        "operationId": "getAllDistributionRootsByStatus",
        "summary": "Retrieve all distribution roots by status",
        "description": "Fetches all distribution root records by status with pagination support. Returns the most recent root for each rootIndex.",
        "tags": [
          "Distribution Roots"
        ],
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The status of distribution roots to filter by",
              "example": "disabled"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "default": 1,
              "description": "The page number to retrieve",
              "example": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "default": 12,
              "description": "The number of records per page",
              "example": 12
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of distribution root records.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "rootIndex": {
                            "type": "number",
                            "description": "The index of the distribution root",
                            "example": 1
                          },
                          "root": {
                            "type": "string",
                            "description": "The Merkle root hash",
                            "example": "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"
                          },
                          "rewardsCalculationEndTimestamp": {
                            "type": "number",
                            "description": "The timestamp when rewards calculation ended",
                            "example": 1727836560
                          },
                          "activatedAt": {
                            "type": "number",
                            "description": "The timestamp when the root was activated",
                            "example": 1727836560
                          },
                          "status": {
                            "type": "string",
                            "description": "The current status of the distribution root",
                            "example": "active"
                          },
                          "createdAt": {
                            "type": "number",
                            "description": "The timestamp when the record was created",
                            "example": 1727836560
                          },
                          "updatedAt": {
                            "type": "number",
                            "description": "The timestamp when the record was last updated",
                            "example": 1727836560
                          }
                        },
                        "required": [
                          "rootIndex",
                          "root",
                          "rewardsCalculationEndTimestamp",
                          "activatedAt",
                          "status",
                          "createdAt",
                          "updatedAt"
                        ]
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "total": {
                          "type": "number",
                          "description": "Total number of records in the database",
                          "example": 30
                        },
                        "page": {
                          "type": "number",
                          "description": "The page number of the current response",
                          "example": 1
                        },
                        "limit": {
                          "type": "number",
                          "description": "The number of records returned for this query",
                          "example": 12
                        }
                      },
                      "required": [
                        "total",
                        "page",
                        "limit"
                      ]
                    }
                  },
                  "required": [
                    "data",
                    "meta"
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/fbcc1fb0-7e72-4e5f-a711-879ee3e616ba/all-rewards-claim": {
      "get": {
        "operationId": "getAllRewardClaims",
        "summary": "Retrieve all reward claims with statistics",
        "description": "Fetches reward claims with pagination support, filtering options, and comprehensive statistics about the claims.",
        "tags": [
          "Reward Claims"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "default": 1,
              "description": "The page number to retrieve",
              "example": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "default": 12,
              "description": "The number of records per page",
              "example": 12
            }
          },
          {
            "name": "earner",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Address of the reward earner to filter by",
              "example": "0x1234567890abcdef1234567890abcdef12345678"
            }
          },
          {
            "name": "claimer",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Address of the claimer to filter by",
              "example": "0x1234567890abcdef1234567890abcdef12345678"
            }
          },
          {
            "name": "recipient",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Address of the recipient to filter by",
              "example": "0x1234567890abcdef1234567890abcdef12345678"
            }
          },
          {
            "name": "token",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Address of the token to filter by",
              "example": "0x1234567890abcdef1234567890abcdef12345678"
            }
          },
          {
            "name": "root",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Merkle root hash to filter by",
              "example": "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of reward claims with statistics.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "root": {
                            "type": "string",
                            "description": "The Merkle root hash",
                            "example": "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"
                          },
                          "earner": {
                            "type": "string",
                            "description": "Address of the reward earner",
                            "example": "0x1234567890abcdef1234567890abcdef12345678"
                          },
                          "claimer": {
                            "type": "string",
                            "description": "Address of the claimer",
                            "example": "0x1234567890abcdef1234567890abcdef12345678"
                          },
                          "recipient": {
                            "type": "string",
                            "description": "Address of the recipient",
                            "example": "0x1234567890abcdef1234567890abcdef12345678"
                          },
                          "token": {
                            "type": "string",
                            "description": "Address of the token",
                            "example": "0x1234567890abcdef1234567890abcdef12345678"
                          },
                          "claimedAmount": {
                            "type": "string",
                            "description": "Amount of tokens claimed",
                            "example": "1000000000000000000"
                          },
                          "claimedAt": {
                            "type": "number",
                            "description": "Timestamp of when the claim was made",
                            "example": 1727836560
                          }
                        },
                        "required": [
                          "root",
                          "earner",
                          "claimer",
                          "recipient",
                          "token",
                          "claimedAmount",
                          "claimedAt"
                        ]
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "total": {
                          "type": "number",
                          "description": "Total number of records in the database",
                          "example": 30
                        },
                        "page": {
                          "type": "number",
                          "description": "The page number of the current response",
                          "example": 1
                        },
                        "limit": {
                          "type": "number",
                          "description": "The number of records returned for this query",
                          "example": 12
                        }
                      },
                      "required": [
                        "total",
                        "page",
                        "limit"
                      ]
                    },
                    "statistics": {
                      "type": "object",
                      "properties": {
                        "distinctRoots": {
                          "type": "number",
                          "description": "Number of unique Merkle roots",
                          "example": 5
                        },
                        "distinctClaimers": {
                          "type": "number",
                          "description": "Number of unique claimers",
                          "example": 100
                        },
                        "distinctEarners": {
                          "type": "number",
                          "description": "Number of unique earners",
                          "example": 95
                        },
                        "distinctRecipients": {
                          "type": "number",
                          "description": "Number of unique recipients",
                          "example": 98
                        },
                        "distinctTokens": {
                          "type": "number",
                          "description": "Number of unique tokens",
                          "example": 3
                        },
                        "totalClaimedAmount": {
                          "type": "string",
                          "description": "Total amount claimed across all tokens",
                          "example": "1000000000000000000000"
                        },
                        "firstClaimDate": {
                          "type": "number",
                          "description": "Timestamp of the first claim",
                          "example": 1727836560,
                          "nullable": true
                        },
                        "lastClaimDate": {
                          "type": "number",
                          "description": "Timestamp of the last claim",
                          "example": 1727836560,
                          "nullable": true
                        },
                        "tokensSummary": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "object",
                            "properties": {
                              "totalAmount": {
                                "type": "string",
                                "description": "Total amount claimed for this token",
                                "example": "500000000000000000000"
                              },
                              "claimsCount": {
                                "type": "number",
                                "description": "Number of claims for this token",
                                "example": 50
                              }
                            },
                            "required": [
                              "totalAmount",
                              "claimsCount"
                            ]
                          },
                          "description": "Summary of claims grouped by token"
                        }
                      },
                      "required": [
                        "distinctRoots",
                        "distinctClaimers",
                        "distinctEarners",
                        "distinctRecipients",
                        "distinctTokens",
                        "totalClaimedAmount",
                        "firstClaimDate",
                        "lastClaimDate",
                        "tokensSummary"
                      ]
                    }
                  },
                  "required": [
                    "data",
                    "meta",
                    "statistics"
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/fbcc1fb0-7e72-4e5f-a711-879ee3e616ba/all-avs-rewards-submission": {
      "get": {
        "operationId": "getAVSRewardsSubmissions",
        "summary": "Retrieve all AVS rewards submissions",
        "description": "Fetches AVS rewards submissions with pagination support and strategy information.",
        "tags": [
          "AVS Rewards"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "default": 1,
              "description": "The page number to retrieve",
              "example": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "default": 12,
              "description": "The number of records per page",
              "example": 12
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of AVS rewards submissions with pagination metadata.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "avs": {
                            "type": "string",
                            "description": "The AVS identifier",
                            "example": "0x1234567890abcdef1234567890abcdef12345678"
                          },
                          "submissionNonce": {
                            "type": "string",
                            "description": "The nonce of the submission",
                            "example": "1"
                          },
                          "rewardsSubmissionHash": {
                            "type": "string",
                            "description": "Hash of the rewards submission",
                            "example": "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"
                          },
                          "tokenUsed": {
                            "type": "string",
                            "description": "Address of the token used for rewards",
                            "example": "0x1234567890abcdef1234567890abcdef12345678"
                          },
                          "tokenAmount": {
                            "type": "string",
                            "description": "Amount of tokens for rewards",
                            "example": "1000000000000000000"
                          },
                          "startTimestamp": {
                            "type": "number",
                            "description": "Start timestamp of the rewards period",
                            "example": 1727836560
                          },
                          "duration": {
                            "type": "number",
                            "description": "Duration of the rewards period in seconds",
                            "example": 604800
                          },
                          "strategies": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "description": "List of strategy addresses",
                            "example": [
                              "0x1234567890abcdef1234567890abcdef12345678",
                              "0x9876543210abcdef1234567890abcdef12345678"
                            ]
                          },
                          "blockTimestamp": {
                            "type": "number",
                            "description": "Timestamp of the block when submission was made",
                            "example": 1727836560
                          }
                        },
                        "required": [
                          "avs",
                          "submissionNonce",
                          "rewardsSubmissionHash",
                          "tokenUsed",
                          "tokenAmount",
                          "startTimestamp",
                          "duration",
                          "strategies",
                          "blockTimestamp"
                        ]
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "total": {
                          "type": "number",
                          "description": "Total number of records in the database",
                          "example": 30
                        },
                        "page": {
                          "type": "number",
                          "description": "The current page number",
                          "example": 1
                        },
                        "limit": {
                          "type": "number",
                          "description": "The number of records per page",
                          "example": 12
                        }
                      },
                      "required": [
                        "total",
                        "page",
                        "limit"
                      ]
                    }
                  },
                  "required": [
                    "data",
                    "meta"
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/fbcc1fb0-7e72-4e5f-a711-879ee3e616ba/avs-rewards-submission-by-avs": {
      "get": {
        "operationId": "getAVSRewardsSubmissionsByAVS",
        "summary": "Retrieve all AVS rewards submissions of an AVS",
        "description": "Fetches AVS rewards submissions of an AVS with pagination support and strategy information.",
        "tags": [
          "AVS Rewards"
        ],
        "parameters": [
          {
            "name": "avs",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The address of AVS to filter by",
              "example": "0x870679e138bcdf293b7ff14dd44b70fc97e12fc0"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "default": 1,
              "description": "The page number to retrieve",
              "example": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "default": 12,
              "description": "The number of records per page",
              "example": 12
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of AVS rewards submissions with pagination metadata.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "avs": {
                            "type": "string",
                            "description": "The AVS identifier",
                            "example": "0x1234567890abcdef1234567890abcdef12345678"
                          },
                          "submissionNonce": {
                            "type": "string",
                            "description": "The nonce of the submission",
                            "example": "1"
                          },
                          "rewardsSubmissionHash": {
                            "type": "string",
                            "description": "Hash of the rewards submission",
                            "example": "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"
                          },
                          "tokenUsed": {
                            "type": "string",
                            "description": "Address of the token used for rewards",
                            "example": "0x1234567890abcdef1234567890abcdef12345678"
                          },
                          "tokenAmount": {
                            "type": "string",
                            "description": "Amount of tokens for rewards",
                            "example": "1000000000000000000"
                          },
                          "startTimestamp": {
                            "type": "number",
                            "description": "Start timestamp of the rewards period",
                            "example": 1727836560
                          },
                          "duration": {
                            "type": "number",
                            "description": "Duration of the rewards period in seconds",
                            "example": 604800
                          },
                          "strategies": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "description": "List of strategy addresses",
                            "example": [
                              "0x1234567890abcdef1234567890abcdef12345678",
                              "0x9876543210abcdef1234567890abcdef12345678"
                            ]
                          },
                          "blockTimestamp": {
                            "type": "number",
                            "description": "Timestamp of the block when submission was made",
                            "example": 1727836560
                          }
                        },
                        "required": [
                          "avs",
                          "submissionNonce",
                          "rewardsSubmissionHash",
                          "tokenUsed",
                          "tokenAmount",
                          "startTimestamp",
                          "duration",
                          "strategies",
                          "blockTimestamp"
                        ]
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "total": {
                          "type": "number",
                          "description": "Total number of records in the database",
                          "example": 30
                        },
                        "page": {
                          "type": "number",
                          "description": "The current page number",
                          "example": 1
                        },
                        "limit": {
                          "type": "number",
                          "description": "The number of records per page",
                          "example": 12
                        }
                      },
                      "required": [
                        "total",
                        "page",
                        "limit"
                      ]
                    }
                  },
                  "required": [
                    "data",
                    "meta"
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/fbcc1fb0-7e72-4e5f-a711-879ee3e616ba/avs-rewards-submission-by-tokenUsed": {
      "get": {
        "operationId": "getAVSRewardsSubmissionsByTokenUsed",
        "summary": "Retrieve all AVS rewards submissions of given Token",
        "description": "Fetches AVS rewards submissions of an Token with pagination support and strategy information.",
        "tags": [
          "AVS Rewards"
        ],
        "parameters": [
          {
            "name": "tokenUsed",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The address of Token to filter by",
              "example": "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "default": 1,
              "description": "The page number to retrieve",
              "example": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "default": 12,
              "description": "The number of records per page",
              "example": 12
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of AVS rewards submissions with pagination metadata.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "avs": {
                            "type": "string",
                            "description": "The AVS identifier",
                            "example": "0x1234567890abcdef1234567890abcdef12345678"
                          },
                          "submissionNonce": {
                            "type": "string",
                            "description": "The nonce of the submission",
                            "example": "1"
                          },
                          "rewardsSubmissionHash": {
                            "type": "string",
                            "description": "Hash of the rewards submission",
                            "example": "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"
                          },
                          "tokenUsed": {
                            "type": "string",
                            "description": "Address of the token used for rewards",
                            "example": "0x1234567890abcdef1234567890abcdef12345678"
                          },
                          "tokenAmount": {
                            "type": "string",
                            "description": "Amount of tokens for rewards",
                            "example": "1000000000000000000"
                          },
                          "startTimestamp": {
                            "type": "number",
                            "description": "Start timestamp of the rewards period",
                            "example": 1727836560
                          },
                          "duration": {
                            "type": "number",
                            "description": "Duration of the rewards period in seconds",
                            "example": 604800
                          },
                          "strategies": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "description": "List of strategy addresses",
                            "example": [
                              "0x1234567890abcdef1234567890abcdef12345678",
                              "0x9876543210abcdef1234567890abcdef12345678"
                            ]
                          },
                          "blockTimestamp": {
                            "type": "number",
                            "description": "Timestamp of the block when submission was made",
                            "example": 1727836560
                          }
                        },
                        "required": [
                          "avs",
                          "submissionNonce",
                          "rewardsSubmissionHash",
                          "tokenUsed",
                          "tokenAmount",
                          "startTimestamp",
                          "duration",
                          "strategies",
                          "blockTimestamp"
                        ]
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "total": {
                          "type": "number",
                          "description": "Total number of records in the database",
                          "example": 30
                        },
                        "page": {
                          "type": "number",
                          "description": "The current page number",
                          "example": 1
                        },
                        "limit": {
                          "type": "number",
                          "description": "The number of records per page",
                          "example": 12
                        }
                      },
                      "required": [
                        "total",
                        "page",
                        "limit"
                      ]
                    }
                  },
                  "required": [
                    "data",
                    "meta"
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/fbcc1fb0-7e72-4e5f-a711-879ee3e616ba/avs-rewards-submission-by-hash": {
      "get": {
        "operationId": "getAVSRewardsSubmissionByHash",
        "summary": "Retrieve AVS rewards submission by hash",
        "description": "Fetches detailed information about a specific AVS rewards submission using its hash.",
        "tags": [
          "AVS Rewards"
        ],
        "parameters": [
          {
            "name": "hash",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The rewards submission hash to look up",
              "example": "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The detailed information about the AVS rewards submission.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "avs": {
                          "type": "string",
                          "description": "The AVS identifier",
                          "example": "0x1234567890abcdef1234567890abcdef12345678"
                        },
                        "submissionNonce": {
                          "type": "string",
                          "description": "The nonce of the submission",
                          "example": "1"
                        },
                        "rewardsSubmissionHash": {
                          "type": "string",
                          "description": "Hash of the rewards submission",
                          "example": "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"
                        },
                        "tokenUsed": {
                          "type": "string",
                          "description": "Address of the token used for rewards",
                          "example": "0x1234567890abcdef1234567890abcdef12345678"
                        },
                        "tokenAmount": {
                          "type": "string",
                          "description": "Amount of tokens for rewards",
                          "example": "1000000000000000000"
                        },
                        "startTimestamp": {
                          "type": "number",
                          "description": "Start timestamp of the rewards period",
                          "example": 1727836560
                        },
                        "duration": {
                          "type": "number",
                          "description": "Duration of the rewards period in seconds",
                          "example": 604800
                        },
                        "strategyAndMultipliers": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "strategy": {
                                "type": "string",
                                "description": "Address of the strategy",
                                "example": "0x1234567890abcdef1234567890abcdef12345678"
                              },
                              "multiplier": {
                                "type": "number",
                                "description": "Strategy multiplier value (normalized to 18 decimals)",
                                "example": 1.5
                              }
                            },
                            "required": [
                              "strategy",
                              "multiplier"
                            ]
                          },
                          "description": "Array of strategy addresses and their corresponding multipliers"
                        },
                        "blockTimestamp": {
                          "type": "number",
                          "description": "Timestamp of the block when submission was made",
                          "example": 1727836560
                        }
                      },
                      "required": [
                        "avs",
                        "submissionNonce",
                        "rewardsSubmissionHash",
                        "tokenUsed",
                        "tokenAmount",
                        "startTimestamp",
                        "duration",
                        "strategyAndMultipliers",
                        "blockTimestamp"
                      ]
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/6f77a93e-fc87-4f71-9073-48f8fe1af02c/all-batches": {
      "get": {
        "summary": "All Batches",
        "description": "Fetches all batches with basic info",
        "operationId": "getBatchData",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1,
              "description": "The page number for pagination (default is 1)."
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 12,
              "description": "The number of items per page (default is 12)."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response with batch data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "batchId": {
                            "type": "string",
                            "description": "The unique identifier for the batch."
                          },
                          "batchHeaderHash": {
                            "type": "string",
                            "description": "The hash of the batch header."
                          },
                          "blobsLength": {
                            "type": "integer",
                            "description": "The length of the blobs in the batch."
                          },
                          "quorumNumbers": {
                            "type": "array",
                            "items": {
                              "type": "string",
                              "description": "The quorum numbers associated with the batch."
                            },
                            "description": "List of quorum numbers."
                          },
                          "blobHeadersRoot": {
                            "type": "string",
                            "description": "The root of the blob headers."
                          },
                          "referenceBlockNumber": {
                            "type": "integer",
                            "description": "The reference block number."
                          },
                          "signedStakeForQuorums": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "quorumNumber": {
                                  "type": "string",
                                  "description": "The quorum number for which the stake is signed."
                                },
                                "stakeAmount": {
                                  "type": "integer",
                                  "description": "The amount of signed stake for the quorum."
                                }
                              }
                            },
                            "description": "Signed stake for each quorum."
                          },
                          "transactionHash": {
                            "type": "string",
                            "description": "The transaction hash associated with the batch."
                          },
                          "blockTimestamp": {
                            "type": "string",
                            "format": "date-time",
                            "description": "The timestamp of the block."
                          },
                          "blockNumber": {
                            "type": "integer",
                            "description": "The block number for the batch."
                          },
                          "nonSignersCount": {
                            "type": "integer",
                            "description": "The number of non-signers in the batch."
                          }
                        }
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "total": {
                          "type": "integer",
                          "description": "Total number of batches."
                        },
                        "page": {
                          "type": "integer",
                          "description": "The current page number."
                        },
                        "limit": {
                          "type": "integer",
                          "description": "The number of items per page."
                        },
                        "lastUpdateTimestamp": {
                          "type": "string",
                          "format": "date-time",
                          "description": "The timestamp of the latest update."
                        },
                        "latestBlock": {
                          "type": "integer",
                          "description": "The latest block number."
                        },
                        "statistics": {
                          "type": "object",
                          "properties": {
                            "totalBatches": {
                              "type": "integer",
                              "description": "Total number of batches."
                            },
                            "batchesWithNonSigners": {
                              "type": "integer",
                              "description": "Number of batches with non-signers."
                            },
                            "batchesWithNonSignersPercentage": {
                              "type": "number",
                              "format": "float",
                              "description": "Percentage of batches with non-signers."
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/6f77a93e-fc87-4f71-9073-48f8fe1af02c/batch-info": {
      "get": {
        "summary": "Batch Info",
        "description": "Fetches detailed information about a batch, including metadata, logs, transactions, and block details.",
        "operationId": "getBatchData",
        "parameters": [
          {
            "name": "batchId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The unique identifier for the batch."
            }
          },
          {
            "name": "batchHeaderHash",
            "in": "query",
            "required": false,
            "description": "The batch header hash to identify the batch data",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched batch data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "batchId": {
                          "type": "string"
                        },
                        "batchHeaderHash": {
                          "type": "string"
                        },
                        "blobsLength": {
                          "type": "integer"
                        },
                        "quorumNumbers": {
                          "type": "array",
                          "items": {
                            "type": "integer"
                          }
                        },
                        "blobHeadersRoot": {
                          "type": "string"
                        },
                        "referenceBlockNumber": {
                          "type": "integer"
                        },
                        "signedStakeForQuorums": {
                          "type": "array",
                          "items": {
                            "type": "integer"
                          }
                        },
                        "transactionHash": {
                          "type": "string"
                        },
                        "blockTimestamp": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "blockNumber": {
                          "type": "integer"
                        },
                        "batchMetadata": {
                          "type": "object",
                          "properties": {
                            "apkG2": {
                              "type": "string"
                            },
                            "sigma": {
                              "type": "string"
                            },
                            "quorumApks": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "quorumApkIndices": {
                              "type": "array",
                              "items": {
                                "type": "integer"
                              }
                            },
                            "nonSignerPubkeys": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "totalStakeIndices": {
                              "type": "array",
                              "items": {
                                "type": "integer"
                              }
                            },
                            "nonSignerStakeIndices": {
                              "type": "array",
                              "items": {
                                "type": "integer"
                              }
                            },
                            "nonSignerQuorumBitmapIndices": {
                              "type": "array",
                              "items": {
                                "type": "integer"
                              }
                            }
                          }
                        },
                        "nonSignersCount": {
                          "type": "integer"
                        },
                        "nonSigners": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "signatoryRecordHash": {
                          "type": "string"
                        },
                        "logs": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "logIndex": {
                                "type": "string"
                              },
                              "logTransactionHash": {
                                "type": "string"
                              },
                              "logTransactionIndex": {
                                "type": "string"
                              },
                              "logAddress": {
                                "type": "string"
                              },
                              "logData": {
                                "type": "string"
                              },
                              "topics": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        },
                        "transactions": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "transactionHash": {
                                "type": "string"
                              },
                              "nonce": {
                                "type": "integer"
                              },
                              "index": {
                                "type": "integer"
                              },
                              "fromAddress": {
                                "type": "string"
                              },
                              "toAddress": {
                                "type": "string"
                              },
                              "value": {
                                "type": "string"
                              },
                              "gas": {
                                "type": "integer"
                              },
                              "gasPrice": {
                                "type": "string"
                              },
                              "receiptCumulativeGasUsed": {
                                "type": "integer"
                              },
                              "receiptGasUsed": {
                                "type": "integer"
                              },
                              "receiptStatus": {
                                "type": "string"
                              },
                              "effectiveGasPrice": {
                                "type": "string"
                              }
                            }
                          }
                        },
                        "block": {
                          "type": "object",
                          "properties": {
                            "blockNumber": {
                              "type": "integer"
                            },
                            "blockHash": {
                              "type": "string"
                            },
                            "parentHash": {
                              "type": "string"
                            },
                            "nonce": {
                              "type": "string"
                            },
                            "sha3Uncles": {
                              "type": "string"
                            },
                            "logsBloom": {
                              "type": "string"
                            },
                            "transactionsRoot": {
                              "type": "string"
                            },
                            "stateRoot": {
                              "type": "string"
                            },
                            "receiptsRoot": {
                              "type": "string"
                            },
                            "miner": {
                              "type": "string"
                            },
                            "difficulty": {
                              "type": "integer"
                            },
                            "totalDifficulty": {
                              "type": "integer"
                            },
                            "size": {
                              "type": "integer"
                            },
                            "extraData": {
                              "type": "string"
                            },
                            "gasLimit": {
                              "type": "integer"
                            },
                            "gasUsed": {
                              "type": "integer"
                            },
                            "transactionCount": {
                              "type": "integer"
                            }
                          }
                        }
                      }
                    },
                    "metadata": {
                      "type": "object",
                      "properties": {
                        "batchId": {
                          "type": "string"
                        },
                        "blockNumber": {
                          "type": "integer"
                        },
                        "timestamp": {
                          "type": "string",
                          "format": "date-time"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/6f77a93e-fc87-4f71-9073-48f8fe1af02c/batch-by-hash": {
      "get": {
        "summary": "Batch Info by Hash",
        "description": "Fetches detailed information about a batch, including metadata, logs, transactions, and block details.",
        "operationId": "getBatchData",
        "parameters": [
          {
            "name": "batchHeaderHash",
            "in": "query",
            "required": true,
            "description": "The batch header hash to identify the batch data",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched batch data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "batchId": {
                          "type": "string"
                        },
                        "batchHeaderHash": {
                          "type": "string"
                        },
                        "blobsLength": {
                          "type": "integer"
                        },
                        "quorumNumbers": {
                          "type": "array",
                          "items": {
                            "type": "integer"
                          }
                        },
                        "blobHeadersRoot": {
                          "type": "string"
                        },
                        "referenceBlockNumber": {
                          "type": "integer"
                        },
                        "signedStakeForQuorums": {
                          "type": "array",
                          "items": {
                            "type": "integer"
                          }
                        },
                        "transactionHash": {
                          "type": "string"
                        },
                        "blockTimestamp": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "blockNumber": {
                          "type": "integer"
                        },
                        "batchMetadata": {
                          "type": "object",
                          "properties": {
                            "apkG2": {
                              "type": "string"
                            },
                            "sigma": {
                              "type": "string"
                            },
                            "quorumApks": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "quorumApkIndices": {
                              "type": "array",
                              "items": {
                                "type": "integer"
                              }
                            },
                            "nonSignerPubkeys": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "totalStakeIndices": {
                              "type": "array",
                              "items": {
                                "type": "integer"
                              }
                            },
                            "nonSignerStakeIndices": {
                              "type": "array",
                              "items": {
                                "type": "integer"
                              }
                            },
                            "nonSignerQuorumBitmapIndices": {
                              "type": "array",
                              "items": {
                                "type": "integer"
                              }
                            }
                          }
                        },
                        "nonSignersCount": {
                          "type": "integer"
                        },
                        "nonSigners": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "signatoryRecordHash": {
                          "type": "string"
                        },
                        "logs": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "logIndex": {
                                "type": "string"
                              },
                              "logTransactionHash": {
                                "type": "string"
                              },
                              "logTransactionIndex": {
                                "type": "string"
                              },
                              "logAddress": {
                                "type": "string"
                              },
                              "logData": {
                                "type": "string"
                              },
                              "topics": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        },
                        "transactions": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "transactionHash": {
                                "type": "string"
                              },
                              "nonce": {
                                "type": "integer"
                              },
                              "index": {
                                "type": "integer"
                              },
                              "fromAddress": {
                                "type": "string"
                              },
                              "toAddress": {
                                "type": "string"
                              },
                              "value": {
                                "type": "string"
                              },
                              "gas": {
                                "type": "integer"
                              },
                              "gasPrice": {
                                "type": "string"
                              },
                              "receiptCumulativeGasUsed": {
                                "type": "integer"
                              },
                              "receiptGasUsed": {
                                "type": "integer"
                              },
                              "receiptStatus": {
                                "type": "string"
                              },
                              "effectiveGasPrice": {
                                "type": "string"
                              }
                            }
                          }
                        },
                        "block": {
                          "type": "object",
                          "properties": {
                            "blockNumber": {
                              "type": "integer"
                            },
                            "blockHash": {
                              "type": "string"
                            },
                            "parentHash": {
                              "type": "string"
                            },
                            "nonce": {
                              "type": "string"
                            },
                            "sha3Uncles": {
                              "type": "string"
                            },
                            "logsBloom": {
                              "type": "string"
                            },
                            "transactionsRoot": {
                              "type": "string"
                            },
                            "stateRoot": {
                              "type": "string"
                            },
                            "receiptsRoot": {
                              "type": "string"
                            },
                            "miner": {
                              "type": "string"
                            },
                            "difficulty": {
                              "type": "integer"
                            },
                            "totalDifficulty": {
                              "type": "integer"
                            },
                            "size": {
                              "type": "integer"
                            },
                            "extraData": {
                              "type": "string"
                            },
                            "gasLimit": {
                              "type": "integer"
                            },
                            "gasUsed": {
                              "type": "integer"
                            },
                            "transactionCount": {
                              "type": "integer"
                            }
                          }
                        }
                      }
                    },
                    "metadata": {
                      "type": "object",
                      "properties": {
                        "batchId": {
                          "type": "string"
                        },
                        "blockNumber": {
                          "type": "integer"
                        },
                        "timestamp": {
                          "type": "string",
                          "format": "date-time"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/6f77a93e-fc87-4f71-9073-48f8fe1af02c/batch-by-id": {
      "get": {
        "summary": "Batch Info by Id",
        "description": "Fetches detailed information about a batch, including metadata, logs, transactions, and block details.",
        "operationId": "getBatchDetails",
        "parameters": [
          {
            "name": "batchId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The unique identifier for the batch."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched batch details",
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "batchId": "1234",
                    "batchHeaderHash": "abcd1234",
                    "blobsLength": 256,
                    "quorumNumbers": [
                      1,
                      2,
                      3
                    ],
                    "blobHeadersRoot": "rootHash",
                    "referenceBlockNumber": 1000,
                    "signedStakeForQuorums": [
                      100,
                      200
                    ],
                    "transactionHash": "txHash",
                    "blockTimestamp": "2024-11-25T12:00:00Z",
                    "blockNumber": 1001,
                    "batchMetadata": {
                      "apkG2": "someValue",
                      "sigma": "value",
                      "quorumApks": [
                        "apk1",
                        "apk2"
                      ],
                      "quorumApkIndices": [
                        0,
                        1
                      ],
                      "nonSignerPubkeys": [
                        "pubKey1",
                        "pubKey2"
                      ],
                      "totalStakeIndices": [
                        0,
                        1
                      ],
                      "nonSignerStakeIndices": [
                        0
                      ],
                      "nonSignerQuorumBitmapIndices": [
                        0
                      ]
                    },
                    "nonSignersCount": 5,
                    "nonSigners": [],
                    "signatoryRecordHash": "signatoryHash",
                    "logs": [],
                    "transactions": [],
                    "block": {
                      "blockNumber": 1001,
                      "blockHash": "blockHash123",
                      "parentHash": "parentHash123",
                      "nonce": "00000001",
                      "sha3Uncles": "sha3Hash",
                      "logsBloom": "logsBloomHash",
                      "transactionsRoot": "transactionsRootHash",
                      "stateRoot": "stateRootHash",
                      "receiptsRoot": "receiptsRootHash",
                      "miner": "minerAddress",
                      "difficulty": 100000,
                      "totalDifficulty": 200000,
                      "size": 1000,
                      "extraData": "extraData",
                      "gasLimit": 1000000,
                      "gasUsed": 500000,
                      "transactionCount": 10
                    }
                  },
                  "metadata": {
                    "batchId": "1234",
                    "blockNumber": 1001,
                    "timestamp": "2024-11-25T12:00:00Z"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/6f77a93e-fc87-4f71-9073-48f8fe1af02c/batch-nonsigners": {
      "get": {
        "summary": "Batch Non-Signers",
        "description": "Fetches all non-signers information of a given batch.",
        "operationId": "getNonSignersByBatchId",
        "parameters": [
          {
            "name": "batchId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The ID of the batch for which non-signer information is being requested."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved non-signer data.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "operatorId": {
                            "type": "string",
                            "description": "The unique ID of the operator."
                          },
                          "operator": {
                            "type": "string",
                            "description": "The name or identifier of the operator."
                          },
                          "socket": {
                            "type": "string",
                            "description": "The socket associated with the operator."
                          },
                          "status": {
                            "type": "boolean",
                            "description": "The status of the operator (active/inactive)."
                          },
                          "ejected": {
                            "type": "boolean",
                            "description": "Whether the operator has been ejected from the batch."
                          }
                        }
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "total": {
                          "type": "integer",
                          "description": "The total number of non-signers for the given batch."
                        },
                        "batchId": {
                          "type": "string",
                          "description": "The ID of the batch."
                        },
                        "statistics": {
                          "type": "object",
                          "properties": {
                            "totalNonSigners": {
                              "type": "integer",
                              "description": "Total number of non-signers."
                            },
                            "activeNonSigners": {
                              "type": "integer",
                              "description": "Number of active non-signers."
                            },
                            "inactiveNonSigners": {
                              "type": "integer",
                              "description": "Number of inactive non-signers."
                            },
                            "activePercentage": {
                              "type": "number",
                              "description": "Percentage of active non-signers."
                            },
                            "ejectedNonSigners": {
                              "type": "integer",
                              "description": "Number of ejected non-signers."
                            },
                            "ejectedPercentage": {
                              "type": "number",
                              "description": "Percentage of ejected non-signers."
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/6f77a93e-fc87-4f71-9073-48f8fe1af02c/all-operators": {
      "get": {
        "summary": "Fetch Operators with Quorum Stakes",
        "description": "Retrieves a paginated list of operators along with their latest quorum stakes, metadata, and statistics about the operators.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "description": "The page number for pagination."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 12,
              "minimum": 1
            },
            "description": "The number of operators per page."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response containing operator data, metadata, and statistics.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "operatorId": {
                            "type": "string",
                            "description": "The unique ID of the operator."
                          },
                          "operator": {
                            "type": "string",
                            "description": "The operator's name or identifier."
                          },
                          "socket": {
                            "type": "string",
                            "description": "The socket associated with the operator."
                          },
                          "status": {
                            "type": "boolean",
                            "description": "The status of the operator (active or not)."
                          },
                          "ejected": {
                            "type": "boolean",
                            "description": "Indicates if the operator has been ejected."
                          },
                          "quorumStakes": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "quorumNumber": {
                                  "type": "string",
                                  "description": "The quorum number."
                                },
                                "stake": {
                                  "type": "string",
                                  "description": "The stake amount for the operator in the quorum."
                                }
                              }
                            },
                            "description": "An array of quorum stakes for the operator."
                          },
                          "totalStake": {
                            "type": "number",
                            "description": "The total stake of the operator across all quorums."
                          }
                        }
                      },
                      "description": "A list of operators with their respective details and quorum stakes."
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "total": {
                          "type": "integer",
                          "description": "The total number of operators."
                        },
                        "page": {
                          "type": "integer",
                          "description": "The current page number."
                        },
                        "limit": {
                          "type": "integer",
                          "description": "The number of operators per page."
                        },
                        "totalPages": {
                          "type": "integer",
                          "description": "The total number of pages for the query."
                        },
                        "hasMore": {
                          "type": "boolean",
                          "description": "Indicates if more pages are available."
                        },
                        "statistics": {
                          "type": "object",
                          "properties": {
                            "totalOperators": {
                              "type": "integer",
                              "description": "The total number of operators in the system."
                            },
                            "activeOperators": {
                              "type": "integer",
                              "description": "The number of active operators."
                            },
                            "ejectedOperators": {
                              "type": "integer",
                              "description": "The number of ejected operators."
                            },
                            "totalStake": {
                              "type": "number",
                              "description": "The total stake across all operators."
                            },
                            "averageStake": {
                              "type": "number",
                              "description": "The average stake per operator."
                            }
                          },
                          "description": "Summary statistics about the operators and their stakes."
                        }
                      },
                      "description": "Metadata about the paginated response and additional statistics."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/6f77a93e-fc87-4f71-9073-48f8fe1af02c/operator-info": {
      "get": {
        "summary": "Fetch Details for a Specific Operator",
        "description": "Retrieves detailed information for a specific operator, including quorum-related data and calculated statistics.",
        "parameters": [
          {
            "name": "operatorId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The unique ID of the operator to fetch details for."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response containing operator details and statistics.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "operatorId": {
                          "type": "string",
                          "description": "The unique ID of the operator."
                        },
                        "operator": {
                          "type": "string",
                          "description": "The operator's name or identifier."
                        },
                        "socket": {
                          "type": "string",
                          "description": "The socket associated with the operator."
                        },
                        "status": {
                          "type": "boolean",
                          "description": "The status of the operator (active or not)."
                        },
                        "ejected": {
                          "type": "boolean",
                          "description": "Indicates if the operator has been ejected."
                        },
                        "blockNumber": {
                          "type": "integer",
                          "description": "The block number of the operator's latest state."
                        },
                        "quorums": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "quorumNumber": {
                                "type": "string",
                                "description": "The quorum number associated with the operator."
                              },
                              "operatorIndex": {
                                "type": "string",
                                "description": "The index of the operator in the quorum."
                              },
                              "stake": {
                                "type": "string",
                                "description": "The stake amount of the operator in the quorum."
                              },
                              "activeBatchIds": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                },
                                "description": "List of active batch IDs for the operator in the quorum."
                              },
                              "entryBatchIds": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                },
                                "description": "List of entry batch IDs for the operator in the quorum."
                              },
                              "exitBatchIds": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                },
                                "description": "List of exit batch IDs for the operator in the quorum."
                              },
                              "entryTimestamps": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "format": "date-time"
                                },
                                "description": "List of entry timestamps for the operator in the quorum."
                              },
                              "exitTimestamps": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "format": "date-time"
                                },
                                "description": "List of exit timestamps for the operator in the quorum."
                              }
                            }
                          },
                          "description": "A list of quorum-related details for the operator."
                        },
                        "statistics": {
                          "type": "object",
                          "properties": {
                            "totalQuorums": {
                              "type": "integer",
                              "description": "The total number of quorums the operator is part of."
                            },
                            "activeQuorums": {
                              "type": "integer",
                              "description": "The number of active quorums for the operator."
                            },
                            "totalStake": {
                              "type": "number",
                              "description": "The total stake of the operator across all quorums."
                            },
                            "isActive": {
                              "type": "boolean",
                              "description": "Indicates if the operator is active and not ejected."
                            }
                          },
                          "description": "Calculated statistics about the operator."
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/6f77a93e-fc87-4f71-9073-48f8fe1af02c/operators-by-status": {
      "get": {
        "summary": "Fetch Operators by Status with Pagination",
        "description": "Retrieves a list of operators filtered by their status, with pagination and aggregated statistics.",
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The status of the operators to filter by."
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "description": "The page number for pagination."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 12,
              "minimum": 1
            },
            "description": "The number of items per page for pagination."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response containing operators data with metadata and statistics.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "operatorId": {
                            "type": "string",
                            "description": "The unique ID of the operator."
                          },
                          "operator": {
                            "type": "string",
                            "description": "The operator's name or identifier."
                          },
                          "socket": {
                            "type": "string",
                            "description": "The socket associated with the operator."
                          },
                          "status": {
                            "type": "string",
                            "description": "The status of the operator."
                          },
                          "ejected": {
                            "type": "boolean",
                            "description": "Indicates if the operator has been ejected."
                          },
                          "quorumStakes": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "quorumNumber": {
                                  "type": "string",
                                  "description": "The quorum number associated with the operator."
                                },
                                "stake": {
                                  "type": "string",
                                  "description": "The stake amount of the operator in the quorum."
                                }
                              }
                            },
                            "description": "A list of quorum-related stakes for the operator."
                          },
                          "totalStake": {
                            "type": "number",
                            "description": "The total stake of the operator across all quorums."
                          }
                        }
                      },
                      "description": "The list of operators matching the query parameters."
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "total": {
                          "type": "integer",
                          "description": "The total number of operators matching the status."
                        },
                        "status": {
                          "type": "string",
                          "description": "The status filter applied to the operators."
                        },
                        "page": {
                          "type": "integer",
                          "description": "The current page number."
                        },
                        "limit": {
                          "type": "integer",
                          "description": "The number of items per page."
                        },
                        "totalPages": {
                          "type": "integer",
                          "description": "The total number of pages available."
                        },
                        "hasMore": {
                          "type": "boolean",
                          "description": "Indicates if there are more pages available."
                        },
                        "statistics": {
                          "type": "object",
                          "properties": {
                            "totalOperators": {
                              "type": "integer",
                              "description": "The total number of operators."
                            },
                            "totalStake": {
                              "type": "number",
                              "description": "The total stake across all operators."
                            },
                            "averageStake": {
                              "type": "number",
                              "description": "The average stake per operator."
                            }
                          },
                          "description": "Aggregated statistics for the operators."
                        }
                      },
                      "description": "Metadata and statistics about the query result."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/6f77a93e-fc87-4f71-9073-48f8fe1af02c/operators-by-ejection": {
      "get": {
        "summary": "Fetch Operators by Ejection Status with Pagination",
        "description": "Retrieves a list of operators filtered by their ejection status, with pagination and aggregated statistics.",
        "parameters": [
          {
            "name": "ejected",
            "in": "query",
            "required": true,
            "schema": {
              "type": "boolean"
            },
            "description": "The ejection status of the operators to filter by. `true` for ejected operators, `false` for non-ejected."
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "description": "The page number for pagination."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 12,
              "minimum": 1
            },
            "description": "The number of items per page for pagination."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response containing operators data with metadata and statistics.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "operatorId": {
                            "type": "string",
                            "description": "The unique ID of the operator."
                          },
                          "operator": {
                            "type": "string",
                            "description": "The operator's name or identifier."
                          },
                          "socket": {
                            "type": "string",
                            "description": "The socket associated with the operator."
                          },
                          "status": {
                            "type": "string",
                            "description": "The status of the operator."
                          },
                          "ejected": {
                            "type": "boolean",
                            "description": "Indicates if the operator has been ejected."
                          },
                          "quorumStakes": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "quorumNumber": {
                                  "type": "string",
                                  "description": "The quorum number associated with the operator."
                                },
                                "stake": {
                                  "type": "string",
                                  "description": "The stake amount of the operator in the quorum."
                                }
                              }
                            },
                            "description": "A list of quorum-related stakes for the operator."
                          },
                          "totalStake": {
                            "type": "number",
                            "description": "The total stake of the operator across all quorums."
                          }
                        }
                      },
                      "description": "The list of operators matching the query parameters."
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "total": {
                          "type": "integer",
                          "description": "The total number of operators matching the ejection status."
                        },
                        "status": {
                          "type": "boolean",
                          "description": "The ejection status filter applied to the operators."
                        },
                        "page": {
                          "type": "integer",
                          "description": "The current page number."
                        },
                        "limit": {
                          "type": "integer",
                          "description": "The number of items per page."
                        },
                        "totalPages": {
                          "type": "integer",
                          "description": "The total number of pages available."
                        },
                        "hasMore": {
                          "type": "boolean",
                          "description": "Indicates if there are more pages available."
                        },
                        "statistics": {
                          "type": "object",
                          "properties": {
                            "totalOperators": {
                              "type": "integer",
                              "description": "The total number of operators."
                            },
                            "totalStake": {
                              "type": "number",
                              "description": "The total stake across all operators."
                            },
                            "averageStake": {
                              "type": "number",
                              "description": "The average stake per operator."
                            }
                          },
                          "description": "Aggregated statistics for the operators."
                        }
                      },
                      "description": "Metadata and statistics about the query result."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/6f77a93e-fc87-4f71-9073-48f8fe1af02c/operator-nonsignings": {
      "get": {
        "summary": "Retrieve Distinct Non-Signed Batches by Operator and Filters",
        "description": "Fetches distinct non-signed batch IDs associated with a specific operator, filtered by optional time and block ranges, with pagination.",
        "parameters": [
          {
            "name": "operatorId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The unique ID of the operator to filter batches for."
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "description": "The page number for pagination."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 12,
              "minimum": 1
            },
            "description": "The number of items per page for pagination."
          },
          {
            "name": "startTime",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "The start timestamp for filtering batches."
          },
          {
            "name": "endTime",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "The end timestamp for filtering batches."
          },
          {
            "name": "startBlock",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "description": "The starting block number for filtering batches."
          },
          {
            "name": "endBlock",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "description": "The ending block number for filtering batches."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response containing distinct batch data with metadata.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "batchId": {
                            "type": "string",
                            "description": "The unique ID of the batch."
                          },
                          "blockTimestamp": {
                            "type": "string",
                            "format": "date-time",
                            "description": "The timestamp when the block was created."
                          },
                          "blockNumber": {
                            "type": "integer",
                            "description": "The block number associated with the batch."
                          }
                        }
                      },
                      "description": "The list of distinct batches matching the query parameters."
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "total": {
                          "type": "integer",
                          "description": "The total number of distinct batches matching the filters."
                        },
                        "page": {
                          "type": "integer",
                          "description": "The current page number."
                        },
                        "limit": {
                          "type": "integer",
                          "description": "The number of items per page."
                        },
                        "operatorId": {
                          "type": "string",
                          "description": "The operator ID filter applied to the query."
                        },
                        "timeRange": {
                          "type": "object",
                          "properties": {
                            "start": {
                              "type": "string",
                              "format": "date-time",
                              "description": "The earliest timestamp in the result set."
                            },
                            "end": {
                              "type": "string",
                              "format": "date-time",
                              "description": "The latest timestamp in the result set."
                            }
                          },
                          "description": "The range of timestamps covered in the result set."
                        },
                        "blockRange": {
                          "type": "object",
                          "properties": {
                            "start": {
                              "type": "integer",
                              "description": "The lowest block number in the result set."
                            },
                            "end": {
                              "type": "integer",
                              "description": "The highest block number in the result set."
                            }
                          },
                          "description": "The range of block numbers covered in the result set."
                        },
                        "filters": {
                          "type": "object",
                          "properties": {
                            "startTime": {
                              "type": "string",
                              "format": "date-time",
                              "description": "The start timestamp filter applied."
                            },
                            "endTime": {
                              "type": "string",
                              "format": "date-time",
                              "description": "The end timestamp filter applied."
                            },
                            "startBlock": {
                              "type": "integer",
                              "description": "The starting block filter applied."
                            },
                            "endBlock": {
                              "type": "integer",
                              "description": "The ending block filter applied."
                            }
                          },
                          "description": "The filters applied to the query."
                        }
                      },
                      "description": "Metadata about the query result and applied filters."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/6f77a93e-fc87-4f71-9073-48f8fe1af02c/operator-with-issues": {
      "get": {
        "summary": "Fetch Non-Signing Operators",
        "description": "Retrieves a list of operators who have been non-signers with optional time and block-based filtering",
        "parameters": [
          {
            "name": "startTime",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Start time for filtering non-signing events"
          },
          {
            "name": "endTime",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "End time for filtering non-signing events"
          },
          {
            "name": "startBlock",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "description": "Starting block number for filtering non-signing events"
          },
          {
            "name": "endBlock",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "description": "Ending block number for filtering non-signing events"
          },
          {
            "name": "lastNBatches",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "10"
            },
            "description": "Number of most recent batches to retrieve if no other filters are applied"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response with non-signing operators data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "operatorId": {
                            "type": "string",
                            "description": "Unique identifier for the operator"
                          },
                          "operator": {
                            "type": "string",
                            "description": "Operator name or address"
                          },
                          "socket": {
                            "type": "string",
                            "description": "Socket information for the operator"
                          },
                          "missedBatchCount": {
                            "type": "integer",
                            "description": "Number of batches missed by the operator"
                          },
                          "missedBatches": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "description": "List of missed batch IDs"
                          },
                          "firstMissedAt": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Timestamp of the first missed batch"
                          },
                          "lastMissedAt": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Timestamp of the last missed batch"
                          },
                          "firstMissedBlock": {
                            "type": "integer",
                            "description": "First block number where a batch was missed"
                          },
                          "lastMissedBlock": {
                            "type": "integer",
                            "description": "Last block number where a batch was missed"
                          }
                        }
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "total": {
                          "type": "integer",
                          "description": "Total number of non-signing operators"
                        },
                        "timeRange": {
                          "type": "object",
                          "properties": {
                            "start": {
                              "type": "string",
                              "format": "date-time"
                            },
                            "end": {
                              "type": "string",
                              "format": "date-time"
                            }
                          }
                        },
                        "blockRange": {
                          "type": "object",
                          "properties": {
                            "start": {
                              "type": "integer"
                            },
                            "end": {
                              "type": "integer"
                            }
                          }
                        },
                        "filteredBatchCount": {
                          "type": "integer",
                          "description": "Number of batches considered in the query"
                        },
                        "statistics": {
                          "type": "object",
                          "properties": {
                            "totalOperators": {
                              "type": "integer",
                              "description": "Total number of operators with missed batches"
                            },
                            "totalMissedBatches": {
                              "type": "integer",
                              "description": "Total number of missed batches"
                            },
                            "averageMissedBatchesPerOperator": {
                              "type": "number",
                              "description": "Average number of missed batches per operator"
                            },
                            "mostMissedBatches": {
                              "type": "integer",
                              "description": "Highest number of missed batches by a single operator"
                            },
                            "leastMissedBatches": {
                              "type": "integer",
                              "description": "Lowest number of missed batches by a single operator"
                            }
                          }
                        },
                        "filters": {
                          "type": "object",
                          "properties": {
                            "startTime": {
                              "type": "string",
                              "format": "date-time"
                            },
                            "endTime": {
                              "type": "string",
                              "format": "date-time"
                            },
                            "startBlock": {
                              "type": "integer"
                            },
                            "endBlock": {
                              "type": "integer"
                            },
                            "lastNBatches": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/6f77a93e-fc87-4f71-9073-48f8fe1af02c/operator-activity": {
      "get": {
        "summary": "Fetch operator activities",
        "operationId": "getOperatorActivities",
        "parameters": [
          {
            "name": "operatorId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The unique identifier of the operator."
            }
          },
          {
            "name": "action",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The action performed by the operator (e.g., 'sign', 'missed')."
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "1",
              "description": "Page number for pagination."
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "20",
              "description": "Number of records per page."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response with operator activity data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "operatorId": {
                            "type": "string",
                            "description": "The operator's unique identifier."
                          },
                          "quorumNumber": {
                            "type": "string",
                            "description": "The quorum number associated with the action."
                          },
                          "action": {
                            "type": "string",
                            "description": "The action performed by the operator."
                          },
                          "batchId": {
                            "type": "string",
                            "description": "The batch identifier associated with the action."
                          },
                          "transactionHash": {
                            "type": "string",
                            "description": "The transaction hash of the action."
                          },
                          "blockTimestamp": {
                            "type": "string",
                            "description": "The timestamp of the block in which the action occurred."
                          },
                          "blockNumber": {
                            "type": "integer",
                            "description": "The block number in which the action occurred."
                          }
                        }
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "total": {
                          "type": "integer",
                          "description": "The total number of activities matching the filters."
                        },
                        "page": {
                          "type": "integer",
                          "description": "The current page number."
                        },
                        "limit": {
                          "type": "integer",
                          "description": "The number of records per page."
                        },
                        "totalPages": {
                          "type": "integer",
                          "description": "Total number of pages based on the provided limit."
                        },
                        "hasMore": {
                          "type": "boolean",
                          "description": "Indicates whether there are more results available on the next page."
                        }
                      }
                    },
                    "summary": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "integer",
                        "description": "The count of activities per action type."
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/6f77a93e-fc87-4f71-9073-48f8fe1af02c/all-quorums": {
      "get": {
        "summary": "Fetch Quorums",
        "description": "Retrieves the latest information about all quorums with pagination and metadata, including statistics.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "required": false,
            "description": "The page number for pagination."
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 12
            },
            "required": false,
            "description": "The number of results to return per page."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response containing quorums data and metadata.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "quorumNumber": {
                            "type": "integer",
                            "description": "The unique number of the quorum."
                          },
                          "strategiesCount": {
                            "type": "integer",
                            "description": "The count of strategies for the quorum."
                          },
                          "minimumStake": {
                            "type": "number",
                            "description": "The minimum stake required for the quorum."
                          },
                          "createdAt": {
                            "type": "object",
                            "properties": {
                              "blockNumber": {
                                "type": "integer",
                                "description": "The block number when the quorum was created."
                              },
                              "blockTimestamp": {
                                "type": "string",
                                "format": "date-time",
                                "description": "The block timestamp of quorum creation."
                              },
                              "transactionHash": {
                                "type": "string",
                                "description": "The transaction hash of quorum creation."
                              }
                            }
                          },
                          "updatedAt": {
                            "type": "object",
                            "properties": {
                              "blockNumber": {
                                "type": "integer",
                                "description": "The block number when the quorum was last updated."
                              },
                              "blockTimestamp": {
                                "type": "string",
                                "format": "date-time",
                                "description": "The block timestamp of the last update."
                              },
                              "transactionHash": {
                                "type": "string",
                                "description": "The transaction hash of the last update."
                              }
                            }
                          }
                        }
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "total": {
                          "type": "integer",
                          "description": "The total number of quorums."
                        },
                        "page": {
                          "type": "integer",
                          "description": "The current page number."
                        },
                        "limit": {
                          "type": "integer",
                          "description": "The number of results per page."
                        },
                        "totalPages": {
                          "type": "integer",
                          "description": "The total number of pages."
                        },
                        "hasMore": {
                          "type": "boolean",
                          "description": "Whether there are more results beyond the current page."
                        },
                        "statistics": {
                          "type": "object",
                          "properties": {
                            "totalQuorums": {
                              "type": "integer",
                              "description": "The total number of quorums retrieved."
                            },
                            "averageStrategiesPerQuorum": {
                              "type": "number",
                              "description": "The average number of strategies per quorum."
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/6f77a93e-fc87-4f71-9073-48f8fe1af02c/quorum-info": {
      "get": {
        "summary": "Fetch Quorum Details",
        "description": "Retrieves detailed information about a specific quorum, including strategies, stake, and member counts.",
        "parameters": [
          {
            "name": "quorumNumber",
            "in": "query",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The unique number of the quorum to retrieve details for."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response containing quorum details.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "quorumNumber": {
                      "type": "integer",
                      "description": "The unique number of the quorum."
                    },
                    "strategies": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "The strategies associated with the quorum."
                    },
                    "minimumStake": {
                      "type": "number",
                      "description": "The minimum stake required for the quorum."
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp when the quorum was created."
                    },
                    "updatedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of the last update to the quorum."
                    },
                    "registeredMembersCount": {
                      "type": "integer",
                      "description": "The total number of registered members in the quorum."
                    },
                    "activeMembersCount": {
                      "type": "integer",
                      "description": "The total number of active members in the quorum."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/6f77a93e-fc87-4f71-9073-48f8fe1af02c/quorum-operators": {
      "get": {
        "summary": "Fetch Operators of a Quorum",
        "description": "Retrieves a paginated list of operators in a specified quorum, along with metadata and additional statistics.",
        "parameters": [
          {
            "name": "quorumNumber",
            "in": "query",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The unique number of the quorum to retrieve operators for."
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "required": false,
            "description": "The page number for pagination."
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 12,
              "minimum": 1
            },
            "required": false,
            "description": "The number of operators per page."
          },
          {
            "name": "active",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false"
              ],
              "default": "false"
            },
            "required": false,
            "description": "Filter to include only active operators (stake > 0) if set to `true`."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response containing operators and metadata.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "operatorId": {
                            "type": "string",
                            "description": "The unique identifier of the operator."
                          },
                          "stake": {
                            "type": "string",
                            "description": "The stake amount of the operator."
                          }
                        }
                      },
                      "description": "A list of operators for the requested quorum and page."
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "total": {
                          "type": "integer",
                          "description": "The total number of operators for the quorum."
                        },
                        "page": {
                          "type": "integer",
                          "description": "The current page number."
                        },
                        "limit": {
                          "type": "integer",
                          "description": "The number of operators per page."
                        },
                        "totalPages": {
                          "type": "integer",
                          "description": "The total number of pages."
                        },
                        "hasMore": {
                          "type": "boolean",
                          "description": "Indicates if there are more pages to retrieve."
                        },
                        "statistics": {
                          "type": "object",
                          "properties": {
                            "totalOperators": {
                              "type": "integer",
                              "description": "The total number of operators in the quorum."
                            },
                            "currentPageActiveOperators": {
                              "type": "integer",
                              "description": "The number of active operators on the current page."
                            },
                            "currentPageTotalStake": {
                              "type": "number",
                              "description": "The total stake of operators on the current page."
                            },
                            "currentPageAverageStake": {
                              "type": "number",
                              "description": "The average stake of operators on the current page."
                            }
                          },
                          "description": "Additional statistics for the current page."
                        }
                      },
                      "description": "Metadata about the paginated response."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/6f77a93e-fc87-4f71-9073-48f8fe1af02c/quorum-activity": {
      "get": {
        "summary": "Fetch Operator Activities",
        "description": "Retrieves a paginated list of operator activities for a specified quorum, filtered by optional parameters such as `operatorId` and `action`. The response also includes metadata and a summary of actions.",
        "parameters": [
          {
            "name": "quorumNumber",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The unique quorum number for which activities are retrieved."
          },
          {
            "name": "operatorId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "The ID of a specific operator to filter activities."
          },
          {
            "name": "action",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "A specific action type to filter activities (e.g., 'join', 'leave')."
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "description": "The page number for pagination."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 20,
              "minimum": 1
            },
            "description": "The number of activities per page."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response containing operator activities, metadata, and a summary.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "operatorId": {
                            "type": "string",
                            "description": "The unique ID of the operator."
                          },
                          "quorumNumber": {
                            "type": "string",
                            "description": "The unique number of the quorum."
                          },
                          "action": {
                            "type": "string",
                            "description": "The type of action performed by the operator."
                          },
                          "batchId": {
                            "type": "string",
                            "description": "The batch ID associated with the action."
                          },
                          "transactionHash": {
                            "type": "string",
                            "description": "The transaction hash for the activity."
                          },
                          "blockTimestamp": {
                            "type": "string",
                            "description": "The timestamp of the block when the action occurred."
                          },
                          "blockNumber": {
                            "type": "integer",
                            "description": "The block number associated with the action."
                          }
                        }
                      },
                      "description": "A list of operator activities for the given quorum."
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "total": {
                          "type": "integer",
                          "description": "The total number of activities for the query."
                        },
                        "page": {
                          "type": "integer",
                          "description": "The current page number."
                        },
                        "limit": {
                          "type": "integer",
                          "description": "The number of activities per page."
                        },
                        "totalPages": {
                          "type": "integer",
                          "description": "The total number of pages for the query."
                        },
                        "hasMore": {
                          "type": "boolean",
                          "description": "Indicates if more pages are available."
                        }
                      },
                      "description": "Metadata about the paginated response."
                    },
                    "summary": {
                      "type": "object",
                      "properties": {
                        "actionCounts": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "integer"
                          },
                          "description": "A summary of action types and their respective counts."
                        },
                        "uniqueOperators": {
                          "type": "integer",
                          "description": "The number of unique operators involved in the activities."
                        }
                      },
                      "description": "Summary information about the queried activities."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {},
    "responses": {
      "400": {
        "description": "The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "bad_request"
                      ],
                      "description": "A short code indicating the error code returned.",
                      "example": "bad_request"
                    },
                    "message": {
                      "type": "string",
                      "description": "A human readable explanation of what went wrong.",
                      "example": "The requested resource was not found."
                    },
                    "doc_url": {
                      "type": "string",
                      "description": "A link to our documentation with more details about this error code",
                      "example": "https://docs.rescan.dev.com/api-reference/errors#bad_request"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                }
              },
              "required": [
                "error"
              ]
            }
          }
        }
      },
      "401": {
        "description": "Although the HTTP standard specifies \"unauthorized\", semantically this response means \"unauthenticated\". That is, the client must authenticate itself to get the requested response.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "unauthorized"
                      ],
                      "description": "A short code indicating the error code returned.",
                      "example": "unauthorized"
                    },
                    "message": {
                      "type": "string",
                      "description": "A human readable explanation of what went wrong.",
                      "example": "The requested resource was not found."
                    },
                    "doc_url": {
                      "type": "string",
                      "description": "A link to our documentation with more details about this error code",
                      "example": "https://docs.rescan.dev.com/api-reference/errors#unauthorized"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                }
              },
              "required": [
                "error"
              ]
            }
          }
        }
      },
      "403": {
        "description": "The client does not have access rights to the content; that is, it is unauthorized, so the server is refusing to give the requested resource. Unlike 401 Unauthorized, the client's identity is known to the server.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "forbidden"
                      ],
                      "description": "A short code indicating the error code returned.",
                      "example": "forbidden"
                    },
                    "message": {
                      "type": "string",
                      "description": "A human readable explanation of what went wrong.",
                      "example": "The requested resource was not found."
                    },
                    "doc_url": {
                      "type": "string",
                      "description": "A link to our documentation with more details about this error code",
                      "example": "https://docs.rescan.dev.com/api-reference/errors#forbidden"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                }
              },
              "required": [
                "error"
              ]
            }
          }
        }
      },
      "404": {
        "description": "The server cannot find the requested resource.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "not_found"
                      ],
                      "description": "A short code indicating the error code returned.",
                      "example": "not_found"
                    },
                    "message": {
                      "type": "string",
                      "description": "A human readable explanation of what went wrong.",
                      "example": "The requested resource was not found."
                    },
                    "doc_url": {
                      "type": "string",
                      "description": "A link to our documentation with more details about this error code",
                      "example": "https://docs.rescan.dev.com/api-reference/errors#not_found"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                }
              },
              "required": [
                "error"
              ]
            }
          }
        }
      },
      "422": {
        "description": "The request was well-formed but was unable to be followed due to semantic errors.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "unprocessable_entity"
                      ],
                      "description": "A short code indicating the error code returned.",
                      "example": "unprocessable_entity"
                    },
                    "message": {
                      "type": "string",
                      "description": "A human readable explanation of what went wrong.",
                      "example": "The requested resource was not found."
                    },
                    "doc_url": {
                      "type": "string",
                      "description": "A link to our documentation with more details about this error code",
                      "example": "https://docs.rescan.dev.com/api-reference/errors#unprocessable_entity"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                }
              },
              "required": [
                "error"
              ]
            }
          }
        }
      },
      "429": {
        "description": "The user has sent too many requests in a given amount of time (\"rate limiting\")",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "rate_limit_exceeded"
                      ],
                      "description": "A short code indicating the error code returned.",
                      "example": "rate_limit_exceeded"
                    },
                    "message": {
                      "type": "string",
                      "description": "A human readable explanation of what went wrong.",
                      "example": "The requested resource was not found."
                    },
                    "doc_url": {
                      "type": "string",
                      "description": "A link to our documentation with more details about this error code",
                      "example": "https://docs.rescan.dev.com/api-reference/errors#rate_limit_exceeded"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                }
              },
              "required": [
                "error"
              ]
            }
          }
        }
      },
      "500": {
        "description": "The server has encountered a situation it does not know how to handle.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "internal_server_error"
                      ],
                      "description": "A short code indicating the error code returned.",
                      "example": "internal_server_error"
                    },
                    "message": {
                      "type": "string",
                      "description": "A human readable explanation of what went wrong.",
                      "example": "The requested resource was not found."
                    },
                    "doc_url": {
                      "type": "string",
                      "description": "A link to our documentation with more details about this error code",
                      "example": "https://docs.rescan.dev.com/api-reference/errors#internal_server_error"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                }
              },
              "required": [
                "error"
              ]
            }
          }
        }
      }
    },
    "securitySchemes": {
      "ApiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "x-api-key",
        "x-api-key": "1mPU/TsWuVYqPx6fQNXbWQ==:T4fa4ltXa+LybOfCxz2eVhrZtLeqWz+0d4m691U+S4XPlpEKTJg5OM6Ok+ziqsjDOHadoeowzP+CJmwawtjSmw=="
      }
    }
  }
}